<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>TypeScript 查漏补缺</title>
    <link href="/2023/01/09/TypeScript-%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/"/>
    <url>/2023/01/09/TypeScript-%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/</url>
    
    <content type="html"><![CDATA[<blockquote><p>TypeScript 查漏补缺</p></blockquote><ul><li><p>声明对象类型时，如果不确定对象属性的数量时</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// propName 代表剩余的属性名为 String 类型，值为 Any</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">c</span>: &#123;<span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>, [<span class="hljs-attr">propName</span>: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">any</span>&#125;<br>c = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;呵呵&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>  <span class="hljs-attr">gender</span>: <span class="hljs-string">&#x27;男&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>tsconfig.json</code></p><ul><li><code>include</code> 用来指定哪些 ts 文件需要编译</li><li><code>exclude</code> 用来指定哪些 ts 文件不需要编译，默认存在 <code>node_module</code></li><li><code>compilerOptions</code> 用来指定编译选项<ul><li><code>module</code> 指定要使用模块化的规范</li><li><code>outDir</code> 指定编译后文件所在的目录</li><li><code>outFile</code> 将代码合并为一个文件，设置后，所有的全局作用域的代码会合并到同一个文件中</li><li><code>allowJs</code> 是否对 JS 文件进行编译，默认是 false</li><li><code>checkJs</code> 是否检查 JS 语法，默认是 false</li><li><code>removeComments</code> 是否移除注释</li><li><code>noEmit</code> 不生成编译后的文件</li><li><code>noEmitOnError</code> 当有错误时，不生成编译文件</li><li><code>alwayStrict</code> 用来设置编译后的文件是否使用严格模式</li><li><code>noImplicitAny</code> 不允许隐式 any</li><li><code>noImplicitThis</code> 不允许不明确类型 this</li><li><code>strictNullCheck</code> 严格的检查空值</li></ul></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;include&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;./src/**/*&quot;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;exclude&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;./src/hello/**/*&quot;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;compilerOptions&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;target&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;es6&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;module&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;es6&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;outDir&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./dist&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;allowJs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;checkJs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;removeComments&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;noEmit&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;noEmitOnError&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;alwayStrict&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;noImplicitAny&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;noImplicitThis&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;strictNullCheck&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>面向对象</p></li><li><p>类</p><ul><li><p>规定对象里面有什么属性和方法</p></li><li><p>定义类</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>  <span class="hljs-comment">// 实例属性，只有 new 了之后才能访问</span><br>  name = <span class="hljs-string">&quot;哈哈&quot;</span><br>  <span class="hljs-comment">// 在属性前使用 static 关键词可以定义类属性，可以直接访问</span><br>  <span class="hljs-keyword">static</span> age = <span class="hljs-number">18</span><br>  <span class="hljs-comment">// 定义实例方法，定义类方法要加 static</span><br>  <span class="hljs-title function_">sayHello</span>(<span class="hljs-params"></span>)&#123;<br>    consle.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> per = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(per)<br>per.<span class="hljs-title function_">sayHello</span>()<br></code></pre></td></tr></table></figure></li><li><p>构造函数和 <code>this</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>&#123;<br>  <span class="hljs-comment">// new 的时候相当于调用 constructor()</span><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span>, age: <span class="hljs-built_in">number</span></span>)&#123;<br>    <span class="hljs-comment">// 在实例方法中，this 就表示当前的实例</span><br>    <span class="hljs-comment">// 在构造函数中，当前对象就是当前新建的那个对象</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age<br>  &#125;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br>  <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span><br>  <span class="hljs-title function_">bark</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">// 在方法中可以通过调用 this 来表示当前调用方法的对象</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;汪汪&#x27;</span>)<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> dog = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;旺财&quot;</span>, <span class="hljs-number">3</span>)<br><span class="hljs-keyword">const</span> dog2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;森巴&quot;</span>, <span class="hljs-number">4</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dog)<br>dog2.<span class="hljs-title function_">bark</span>()<br></code></pre></td></tr></table></figure></li><li><p>继承</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>&#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span>, age: <span class="hljs-built_in">number</span></span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age<br>  &#125;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br>  <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span><br>  <span class="hljs-title function_">sayHello</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;动物在叫&quot;</span>)<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 使用继承后，子类就会拥有父类的所有的属性和方法</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Animal</span>&#123;<br><span class="hljs-title function_">run</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>在跑`</span>)<br>  &#125;<br>  <span class="hljs-comment">// 子类同名方法会覆盖父类方法</span><br>  <span class="hljs-title function_">sayHello</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;汪汪&quot;</span>)<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Animal</span>&#123;<br><span class="hljs-title function_">eat</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>在吃`</span>)<br>  &#125;<br>&#125;<br><span class="hljs-keyword">const</span> dog = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;森巴&quot;</span>, <span class="hljs-number">4</span>)<br><span class="hljs-keyword">const</span> cat = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>(<span class="hljs-string">&quot;嘻嘻&quot;</span>, <span class="hljs-number">2</span>)<br>dog.<span class="hljs-title function_">run</span>()<br>cat.<span class="hljs-title function_">eat</span>()<br></code></pre></td></tr></table></figure></li><li><p><code>super</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>&#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span></span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>  &#125;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br>  <span class="hljs-title function_">sayHello</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;动物在叫&quot;</span>)<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Animal</span>&#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span>, age:<span class="hljs-built_in">number</span></span>)&#123;<br>    <span class="hljs-comment">// 如果在子类中写了构造函数，在子类的构造函数中必须对父类的构造函数进行调用</span><br>    <span class="hljs-variable language_">super</span>(name)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age<br>  &#125;<br>  <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span><br>  <span class="hljs-title function_">sayHello</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">// 在类的方法中 super 就表示当前的父类</span><br>    <span class="hljs-comment">// super.sayHello()</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;汪汪&quot;</span>)<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> dog = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;森巴&quot;</span>, <span class="hljs-number">4</span>)<br></code></pre></td></tr></table></figure></li><li><p>抽象类</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 以 abstract 开头的类是抽象类，不能用来创建对象，只能用来继承</span><br><span class="hljs-comment">// 抽象类可以添加抽象方法</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>&#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span></span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>  &#125;<br>  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br>  <span class="hljs-comment">// 定义抽象方法，没有方法体，子类必须对抽象方法进行重写</span><br>  <span class="hljs-keyword">abstract</span> <span class="hljs-title function_">sayHello</span>(): <span class="hljs-built_in">void</span><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Animal</span>&#123;<br>  <span class="hljs-title function_">sayHello</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;汪汪&quot;</span>)<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> dog = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;森巴&quot;</span>)<br></code></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue3 + Vite + TypeScript 的 Mock Service Worker 使用</title>
    <link href="/2022/11/28/mswDemo/"/>
    <url>/2022/11/28/mswDemo/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本次 Demo 仓库地址 <a href="https://github.com/sdrpsps/mswDemo">https://github.com/sdrpsps/mswDemo</a></p></blockquote><h2 id="Install-安装"><a href="#Install-安装" class="headerlink" title="Install 安装"></a>Install 安装</h2><p>Let’s start by installing the msw package into our project.</p><p>Run the following command in your project’s root directory:</p><p>安装依赖包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install msw --save-dev<br><span class="hljs-meta prompt_"># </span><span class="language-bash">or</span><br>yarn add msw --dev<br><span class="hljs-meta prompt_"># </span><span class="language-bash">or</span><br>pnpm install msw -D<br></code></pre></td></tr></table></figure><h2 id="Mocking-REST-API"><a href="#Mocking-REST-API" class="headerlink" title="Mocking REST API"></a>Mocking REST API</h2><h3 id="Imports-引入"><a href="#Imports-引入" class="headerlink" title="Imports 引入"></a>Imports 引入</h3><p>In our <code>src/mock/handlers.ts</code> file let’s import the essentials we need for mocking a REST API. They are grouped under the rest namespace exposed by the library.</p><p>新建 <code>src/mock/handlers.ts</code> 文件</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// src/mocks/handlers.ts</span><br><span class="hljs-keyword">import</span> &#123; rest &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;msw&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="Request-handler-amp-Response-resolver-请求和相应"><a href="#Request-handler-amp-Response-resolver-请求和相应" class="headerlink" title="Request handler &amp; Response resolver 请求和相应"></a>Request handler &amp; Response resolver 请求和相应</h3><p>Response resolver is a function that accepts the following arguments:</p><p><code>req</code> , an information about a matching request; 请求信息<br><code>res</code> , a functional utility to create the mocked response; 返回信息<br><code>ctx</code> , a group of functions that help to set a status code, headers, body, etc. of the mocked response. 上下文</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; rest &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;msw&quot;</span>;<br><br><span class="hljs-keyword">const</span> articles = [<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;Node.js 日志最佳实践指南&quot;</span>,<br>    <span class="hljs-attr">content</span>:<br>      <span class="hljs-string">&quot;在开发阶段，无论是日志记录还是调试，都可以很容易地跟踪程序并检测到错误。但是在生产环境中，应该考虑更多关于日志记录的问题，因为这对于应用程序的监视和故障排除非常关键。&quot;</span>,<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;https://juejin.cn/post/7017811851345920037&quot;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;NodeJs 全栈创建多文件断点续传&quot;</span>,<br>    <span class="hljs-attr">content</span>:<br>      <span class="hljs-string">&quot;文件上传，算是项目开发中比较常见的需求，本文将展示如何构建一个多文件断点续传组件，可以同时处理多个文件，并可以在出现异常或者网络中断的情况下恢复上传，可以手动暂停和恢复文件的上传。文章内容涉及前端和后端，算是一个小型的全栈项目，项目将使用 NodeJs、Express、Busboy 和 XMLHttpRequest，并使用自己开发的脚手架 generator-norm 来构建项目。&quot;</span>,<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;https://juejin.cn/post/7015935144007729189&quot;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;Node.js 日志之winston使用指南&quot;</span>,<br>    <span class="hljs-attr">content</span>:<br>      <span class="hljs-string">&quot;Winston 是强大、灵活的 Node.js 开源日志库之一，理论上， Winston 是一个可以记录所有信息的记录器。这是一个高度直观的工具，易于定制。&quot;</span>,<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;https://juejin.cn/post/7018169629176496158&quot;</span>,<br>  &#125;,<br>];<br><span class="hljs-keyword">const</span> user = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;admin&quot;</span>,<br>  <span class="hljs-attr">password</span>: <span class="hljs-string">&quot;12345&quot;</span>,<br>  <span class="hljs-attr">token</span>: <span class="hljs-string">&quot;token&quot;</span>,<br>&#125;;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> handlers = [<br>  rest.<span class="hljs-title function_">get</span>(<span class="hljs-string">`/api/article/:id`</span>, <span class="hljs-function">(<span class="hljs-params">req, res, ctx</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; id &#125; = req.<span class="hljs-property">params</span>;<br>    <span class="hljs-keyword">const</span> data = articles.<span class="hljs-title function_">find</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item.<span class="hljs-property">id</span> === <span class="hljs-built_in">parseInt</span>(id <span class="hljs-keyword">as</span> <span class="hljs-built_in">any</span>, <span class="hljs-number">10</span>));<br>    <span class="hljs-keyword">if</span> (data) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-title function_">res</span>(ctx.<span class="hljs-title function_">status</span>(<span class="hljs-number">200</span>), ctx.<span class="hljs-title function_">json</span>(data));<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-title function_">res</span>(ctx.<span class="hljs-title function_">status</span>(<span class="hljs-number">500</span>));<br>    &#125;<br>  &#125;),<br>  rest.<span class="hljs-title function_">post</span>(<span class="hljs-string">`/api/login`</span>, <span class="hljs-function">(<span class="hljs-params">req, res, ctx</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> data = user;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">res</span>(ctx.<span class="hljs-title function_">status</span>(<span class="hljs-number">200</span>), ctx.<span class="hljs-title function_">json</span>(data));<br>  &#125;),<br>];<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> defaultHandlers = [];<br><br></code></pre></td></tr></table></figure><h3 id="Integrate-Browser-整合到浏览器"><a href="#Integrate-Browser-整合到浏览器" class="headerlink" title="Integrate Browser 整合到浏览器"></a>Integrate Browser 整合到浏览器</h3><p>Execute the init command of the Mock Service Worker CLI: 初始化 Worker 到 <code>puilb</code> 目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npx msw init public/ --save<br></code></pre></td></tr></table></figure><h3 id="Configure-worker-配置-Worker"><a href="#Configure-worker-配置-Worker" class="headerlink" title="Configure worker 配置 Worker"></a>Configure worker 配置 Worker</h3><p>Let’s create a file in our mock definition directory (<code>src/mocks</code>) where we would configure and start our Service Worker.</p><p>Create a <code>src/mocks/browser.ts</code> file:</p><p>创建 <code>src/mocks/browser.ts</code> 文件</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; setupWorker &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;msw&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; handlers, defaultHandlers &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./handler&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> mocker = <span class="hljs-title function_">setupWorker</span>(...handlers, ...defaultHandlers);<br></code></pre></td></tr></table></figure><h3 id="Start-worker-启动-Worker"><a href="#Start-worker-启动-Worker" class="headerlink" title="Start worker 启动 Worker"></a>Start worker 启动 Worker</h3><p>在 <code>main.ts</code> 添加即可使用</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// ...</span><br><span class="hljs-keyword">import</span> &#123; mocker &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./mocks/browser&quot;</span>;<br><span class="hljs-comment">// ...</span><br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-property">env</span>.<span class="hljs-property">MODE</span> === <span class="hljs-string">&quot;development&quot;</span>) &#123;<br>  mocker.<span class="hljs-title function_">start</span>(&#123;<br>    <span class="hljs-comment">// 对于没有 mock 的接口直接通过，避免异常</span><br>    <span class="hljs-attr">onUnhandledRequest</span>: <span class="hljs-string">&quot;bypass&quot;</span>,<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="自用-Axios-封装"><a href="#自用-Axios-封装" class="headerlink" title="自用 Axios 封装"></a>自用 Axios 封装</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// src/utils/request.ts</span><br><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> &#123;<br>  <span class="hljs-title class_">AxiosInstance</span>,<br>  <span class="hljs-title class_">AxiosError</span>,<br>  <span class="hljs-title class_">AxiosRequestConfig</span>,<br>  <span class="hljs-title class_">AxiosResponse</span>,<br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;<br><br><br><span class="hljs-keyword">const</span> <span class="hljs-attr">service</span>: <span class="hljs-title class_">AxiosInstance</span> = axios.<span class="hljs-title function_">create</span>(&#123;<br>  <span class="hljs-attr">baseURL</span>: <span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-property">env</span>.<span class="hljs-property">VITE_BASE_API</span>,<br>  <span class="hljs-attr">timeout</span>: <span class="hljs-number">5000</span>,<br>&#125;);<br><br><span class="hljs-comment">/* 请求拦截器 */</span><br>service.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<br>  <span class="hljs-function">(<span class="hljs-params">config: AxiosRequestConfig</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> config;<br>  &#125;,<br>  <span class="hljs-function">(<span class="hljs-params">error: AxiosError</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error);<br>  &#125;<br>);<br><br><span class="hljs-comment">/* 响应拦截器 */</span><br>service.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(<br>  <span class="hljs-function">(<span class="hljs-params">response: AxiosResponse</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 根据自定义错误码判断请求是否成功</span><br><br>    <span class="hljs-comment">// 将组件用的数据返回</span><br>    <span class="hljs-keyword">return</span> response.<span class="hljs-property">data</span>;<br>  &#125;,<br>  <span class="hljs-function">(<span class="hljs-params">error: AxiosError</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error);<br>  &#125;<br>);<br><br><span class="hljs-comment">/* 导出封装的请求方法 */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> http = &#123;<br>  get&lt;T = <span class="hljs-built_in">any</span>&gt;(<span class="hljs-attr">url</span>: <span class="hljs-built_in">string</span>, config?: <span class="hljs-title class_">AxiosRequestConfig</span>): <span class="hljs-title class_">Promise</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">return</span> service.<span class="hljs-title function_">get</span>(url, config);<br>  &#125;,<br><br>  post&lt;T = <span class="hljs-built_in">any</span>&gt;(<br>    <span class="hljs-attr">url</span>: <span class="hljs-built_in">string</span>,<br>    data?: <span class="hljs-built_in">object</span>,<br>    config?: <span class="hljs-title class_">AxiosRequestConfig</span><br>  ): <span class="hljs-title class_">Promise</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">return</span> service.<span class="hljs-title function_">post</span>(url, data, config);<br>  &#125;,<br><br>  put&lt;T = <span class="hljs-built_in">any</span>&gt;(<br>    <span class="hljs-attr">url</span>: <span class="hljs-built_in">string</span>,<br>    data?: <span class="hljs-built_in">object</span>,<br>    config?: <span class="hljs-title class_">AxiosRequestConfig</span><br>  ): <span class="hljs-title class_">Promise</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">return</span> service.<span class="hljs-title function_">put</span>(url, data, config);<br>  &#125;,<br><br>  <span class="hljs-keyword">delete</span>&lt;T = <span class="hljs-built_in">any</span>&gt;(<span class="hljs-attr">url</span>: <span class="hljs-built_in">string</span>, config?: <span class="hljs-title class_">AxiosRequestConfig</span>): <span class="hljs-title class_">Promise</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">return</span> service.<span class="hljs-title function_">delete</span>(url, config);<br>  &#125;,<br>&#125;;<br><br><span class="hljs-comment">/* 导出 axios 实例 */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> service;<br><br></code></pre></td></tr></table></figure><h2 id="Axios-调用"><a href="#Axios-调用" class="headerlink" title="Axios 调用"></a>Axios 调用</h2><h3 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// src/api/index.ts</span><br><br><span class="hljs-keyword">import</span> &#123; http &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/utils/request&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; articleData, articleRes, loginRes &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./types&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getArticle</span>(<span class="hljs-params">id: articleData</span>) &#123;<br>  <span class="hljs-keyword">return</span> http.<span class="hljs-property">get</span>&lt;articleRes&gt;(<span class="hljs-string">`/article/<span class="hljs-subst">$&#123;id&#125;</span>`</span>);<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">login</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> http.<span class="hljs-property">post</span>&lt;loginRes&gt;(<span class="hljs-string">`/login`</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="类型定义"><a href="#类型定义" class="headerlink" title="类型定义"></a>类型定义</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// src/api/types.ts</span><br><br><span class="hljs-comment">/* 文章列表请求参数 */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> articleData &#123;<br>  <span class="hljs-attr">id</span>: <span class="hljs-built_in">number</span>;<br>&#125;<br><span class="hljs-comment">/* 文章列表结果 */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> articleRes &#123;<br>  <span class="hljs-attr">id</span>: <span class="hljs-built_in">number</span>;<br>  <span class="hljs-attr">title</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-attr">content</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-attr">url</span>: <span class="hljs-built_in">string</span>;<br>&#125;<br><span class="hljs-comment">/* 登陆结果 */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> loginRes &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>    <span class="hljs-attr">password</span>: <span class="hljs-built_in">string</span>;<br>    <span class="hljs-attr">token</span>: <span class="hljs-built_in">string</span>;<br>  &#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nest.JS 博客后端学习记录</title>
    <link href="/2022/10/12/nest-blog-learning/"/>
    <url>/2022/10/12/nest-blog-learning/</url>
    
    <content type="html"><![CDATA[<blockquote><p>身为一名前端，除了要本职工作外，还要懂得后端知识。不然在国内如此卷的环境中，迟早被后浪拍死在沙滩上。</p><p>本篇文章尝试记录我自己构建基于 Nest.JS 博客后端的过程，也是学习的过程，希望能够坚持下去～</p></blockquote><span id="more"></span><h2 id="〇、项目代码同步更新仓库"><a href="#〇、项目代码同步更新仓库" class="headerlink" title="〇、项目代码同步更新仓库"></a>〇、<a href="https://github.com/sdrpsps/nest-blog">项目代码同步更新仓库</a></h2><h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h2><ol><li><h3 id="安装官方脚手架"><a href="#安装官方脚手架" class="headerlink" title="安装官方脚手架"></a>安装官方脚手架</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pnpm add -g @nestjs/cli<br></code></pre></td></tr></table></figure></li><li><h3 id="项目依赖"><a href="#项目依赖" class="headerlink" title="项目依赖"></a>项目依赖</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">pnpm add prisma-binding @prisma/client mockjs @nestjs/config class-validator class-transformer argon2 @nestjs/passport passport passport-local @nestjs/jwt passport-jwt lodash multer dayjs express redis @nestjs/throttler<br><br>pnpm add -D prisma typescript @types/node @types/mockjs @nestjs/mapped-types @types/passport-local @types/passport-jwt @types/express @types/lodash @types/multer @types/node<br></code></pre></td></tr></table></figure></li><li><h3 id="安装-VSCode-插件"><a href="#安装-VSCode-插件" class="headerlink" title="安装 VSCode 插件"></a>安装 VSCode 插件</h3><ol><li><h4 id="Prisma"><a href="#Prisma" class="headerlink" title="Prisma"></a><a href="https://marketplace.visualstudio.com/items?itemName=Prisma.prisma">Prisma</a></h4></li><li><h4 id="Prettier"><a href="#Prettier" class="headerlink" title="Prettier"></a><a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode">Prettier</a></h4></li></ol></li><li><h3 id="代码格式化配置-prettierrc-文件"><a href="#代码格式化配置-prettierrc-文件" class="headerlink" title="代码格式化配置 ( .prettierrc 文件 )"></a>代码格式化配置 ( <code>.prettierrc</code> 文件 )</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;arrowParens&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;always&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;bracketSameLine&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;bracketSpacing&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;embeddedLanguageFormatting&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;auto&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;htmlWhitespaceSensitivity&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;css&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;insertPragma&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;jsxSingleQuote&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;printWidth&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">120</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;proseWrap&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;never&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;quoteProps&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;as-needed&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;requirePragma&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;semi&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;singleQuote&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;tabWidth&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;trailingComma&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;all&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;useTabs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;vueIndentScriptAndStyle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;singleAttributePerLine&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="二、项目初始化"><a href="#二、项目初始化" class="headerlink" title="二、项目初始化"></a>二、项目初始化</h2><ol><li><h3 id="使用脚手架-new-一个新项目"><a href="#使用脚手架-new-一个新项目" class="headerlink" title="使用脚手架 new 一个新项目"></a>使用脚手架 new 一个新项目</h3>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nest new nest-blog<br></code></pre></td></tr></table></figure></li><li><h3 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h3></li><li><h3 id="初始化-Prisma"><a href="#初始化-Prisma" class="headerlink" title="初始化 Prisma"></a>初始化 <a href="https://www.prisma.io/docs/concepts/overview/what-is-prisma">Prisma</a></h3><ol><li><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npx prisma init<br></code></pre></td></tr></table></figure></li><li><h4 id="在-env-文件中定义数据库账号密码和地址"><a href="#在-env-文件中定义数据库账号密码和地址" class="headerlink" title="在 .env 文件中定义数据库账号密码和地址"></a>在 <code>.env</code> 文件中定义数据库账号密码和地址</h4><ol><li><h5 id="如果是本地开发数据库，只需填写-DATABASE-URL-即可"><a href="#如果是本地开发数据库，只需填写-DATABASE-URL-即可" class="headerlink" title="如果是本地开发数据库，只需填写 DATABASE_URL 即可"></a>如果是本地开发数据库，只需填写 <code>DATABASE_URL</code> 即可</h5>   <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">DATABASE_URL=&quot;mysql://账号:密码@服务器:端口/表名&quot;<br></code></pre></td></tr></table></figure></li><li><h5 id="如果是云端服务器数据库，需要填写-SHADOWS-DATABASE-URL"><a href="#如果是云端服务器数据库，需要填写-SHADOWS-DATABASE-URL" class="headerlink" title="如果是云端服务器数据库，需要填写 SHADOWS_DATABASE_URL"></a>如果是云端服务器数据库，需要填写 <code>SHADOWS_DATABASE_URL</code></h5>   <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">DATABASE_URL=mysql://账号:密码@服务器:端口/表名&quot;<br>SHADOW_DATABASE_URL=&quot;mysql://账号:密码@服务器:端口/表名&quot;<br></code></pre></td></tr></table></figure></li><li><h5 id="在-package-json-文件中定义数据自动填充-scripts-上面"><a href="#在-package-json-文件中定义数据自动填充-scripts-上面" class="headerlink" title="在 package.json 文件中定义数据自动填充 (scripts 上面 )"></a>在 <code>package.json</code> 文件中定义数据自动填充 (scripts 上面 )</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;prisma&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;seed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ts-node prisma/seed.ts&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ol></li></ol></li><li><h3 id="创建数据库模型-prisma-schema-prisma-文件"><a href="#创建数据库模型-prisma-schema-prisma-文件" class="headerlink" title="创建数据库模型 prisma/schema.prisma 文件"></a>创建数据库模型 <code>prisma/schema.prisma</code> 文件</h3><ol><li><h4 id="修改-Prisma-默认数据库类型"><a href="#修改-Prisma-默认数据库类型" class="headerlink" title="修改 Prisma 默认数据库类型"></a>修改 Prisma 默认数据库类型</h4>   <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs text">datasource db &#123;<br>  provider = &quot;mysql&quot;<br>  url      = env(&quot;DATABASE_URL&quot;)<br>// 如果是云端服务器数据库，需要加上shadowDatabaseUrl<br>  shadowDatabaseUrl = env(&quot;SHADOW_DATABASE_URL&quot;)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><h4 id="创建用户表和文章模型-表"><a href="#创建用户表和文章模型-表" class="headerlink" title="创建用户表和文章模型(表)"></a>创建用户表和文章模型(表)</h4>   <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs text">model user &#123;<br>  id       Int    @id @default(autoincrement()) @db.UnsignedInt<br>  name     String @unique<br>  password String<br>&#125;<br><br>model article &#123;<br>  id      Int    @id @default(autoincrement()) @db.UnsignedInt<br>  title   String<br>  content String @db.Text<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><h3 id="生成-Prisma-迁移文件"><a href="#生成-Prisma-迁移文件" class="headerlink" title="生成 Prisma 迁移文件"></a>生成 Prisma <a href="https://www.prisma.io/docs/concepts/components/prisma-migrate/migration-histories">迁移文件</a></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npx prisma migrate dev<br></code></pre></td></tr></table></figure></li><li><h3 id="输入迁移文件名称"><a href="#输入迁移文件名称" class="headerlink" title="输入迁移文件名称"></a>输入迁移文件名称</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">Environment variables loaded from .env<br>Prisma schema loaded from prisma/schema.prisma<br>Datasource &quot;db&quot;: MySQL database &quot;blog&quot; at &quot;x.x.x.x:3306&quot;<br><br>✔ Enter a name for the new migration: … init<br>Applying migration `20221013023738_init`<br><br>The following migration(s) have been created and applied from new schema changes:<br><br>migrations/<br>  └─ 20221013023738_init/<br>   └─ migration.sql<br>   <br>Your database is now in sync with your schema.<br></code></pre></td></tr></table></figure></li><li><h3 id="生成成功后，数据库上就会自动生成对应的表和字段"><a href="#生成成功后，数据库上就会自动生成对应的表和字段" class="headerlink" title="生成成功后，数据库上就会自动生成对应的表和字段"></a>生成成功后，数据库上就会自动生成对应的表和字段</h3><ol><li><h4 id="数据表"><a href="#数据表" class="headerlink" title="数据表"></a>数据表<img src="https://i.imgur.com/lKzUclt.png"></h4></li><li><h4 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段<img src="https://i.imgur.com/sb5I6nZ.png" alt="image-20221013104628314"></h4></li></ol></li><li><h3 id="写入自动填充数据，在-prsima-seed-ts"><a href="#写入自动填充数据，在-prsima-seed-ts" class="headerlink" title="写入自动填充数据，在 prsima/seed.ts"></a>写入自动填充数据，在 <code>prsima/seed.ts</code></h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">PrismaClient</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@prisma/client&#x27;</span><br><span class="hljs-keyword">import</span> &#123; hash &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;argon2&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Random</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;mockjs&#x27;</span><br><br><span class="hljs-keyword">const</span> prisma = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrismaClient</span>()<br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">run</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">await</span> prisma.<span class="hljs-property">user</span>.<span class="hljs-title function_">create</span>(&#123;<br>        <span class="hljs-attr">data</span>: &#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;admin&#x27;</span>,<br>            <span class="hljs-attr">password</span>: <span class="hljs-keyword">await</span> <span class="hljs-title function_">hash</span>(<span class="hljs-string">&#x27;123456&#x27;</span>)<br>        &#125;<br>    &#125;)<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">50</span>; i++) &#123;<br>        <span class="hljs-keyword">await</span> prisma.<span class="hljs-property">article</span>.<span class="hljs-title function_">create</span>(&#123;<br>            <span class="hljs-attr">data</span>: &#123;<br>                <span class="hljs-attr">title</span>: <span class="hljs-title class_">Random</span>.<span class="hljs-title function_">ctitle</span>(<span class="hljs-number">10</span>, <span class="hljs-number">30</span>),<br>                <span class="hljs-attr">content</span>: <span class="hljs-title class_">Random</span>.<span class="hljs-title function_">cparagraph</span>(<span class="hljs-number">30</span>, <span class="hljs-number">40</span>)<br>            &#125;<br>        &#125;)<br>    &#125;<br>&#125;<br><br><span class="hljs-title function_">run</span>()<br></code></pre></td></tr></table></figure></li><li><h3 id="重新运行迁移文件，该操作会清除原始数据"><a href="#重新运行迁移文件，该操作会清除原始数据" class="headerlink" title="重新运行迁移文件，该操作会清除原始数据"></a>重新运行迁移文件，该操作会清除原始数据</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npx prisma migrate reset<br></code></pre></td></tr></table></figure></li><li><h3 id="确认操作"><a href="#确认操作" class="headerlink" title="确认操作"></a>确认操作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell">Environment variables loaded from .env<br>Prisma schema loaded from prisma/schema.prisma<br>Datasource &quot;db&quot;: MySQL database &quot;blog&quot; at &quot;x.x.x.x:3306&quot;<br><br>✔ Are you sure you want to reset your database? All data will be lost. … yes<br><br>Applying migration `20221013023738_init`<br><br>Database reset successful<br><br>The following migration(s) have been applied:<br><br>migrations/<br>  └─ 20221013023738_init/<br>    └─ migration.sql<br><br>✔ Generated Prisma Client (4.4.0 | library) to ./node_modules/.pnpm/@prisma+client@4.4.0_prisma@4.4.0/node_modules/@prisma/client in 595ms<br><br>Running seed command `ts-node prisma/seed.ts` ...<br><br>🌱  The seed command has been executed.<br></code></pre></td></tr></table></figure></li><li><h3 id="生成后的数据"><a href="#生成后的数据" class="headerlink" title="生成后的数据"></a>生成后的数据<img src="https://i.imgur.com/6isSQhV.png" alt="image-20221013111542159"></h3></li><li><h3 id="删除自动生成的-app-controller-ts-、-app-services-ts-和-app-controller-spec"><a href="#删除自动生成的-app-controller-ts-、-app-services-ts-和-app-controller-spec" class="headerlink" title="删除自动生成的 app.controller.ts 、 app.services.ts 和 app.controller.spec"></a>删除自动生成的 <code>app.controller.ts</code> 、 <code>app.services.ts</code> 和 <code>app.controller.spec</code></h3></li><li><h3 id="app-modules-ts-删除对应的引入"><a href="#app-modules-ts-删除对应的引入" class="headerlink" title="app.modules.ts 删除对应的引入"></a><code>app.modules.ts</code> 删除对应的引入</h3></li></ol><h2 id="三、登录注册接口"><a href="#三、登录注册接口" class="headerlink" title="三、登录注册接口"></a>三、登录注册接口</h2><ol><li><h3 id="auth-模块"><a href="#auth-模块" class="headerlink" title="auth 模块"></a>auth 模块</h3><ol><li><h4 id="创建模块"><a href="#创建模块" class="headerlink" title="创建模块"></a>创建<a href="https://docs.nestjs.com/modules">模块</a></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nest g mo auth --no-spec<br></code></pre></td></tr></table></figure></li><li><h4 id="创建控制器"><a href="#创建控制器" class="headerlink" title="创建控制器"></a>创建<a href="https://docs.nestjs.com/controllers">控制器</a></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nest g co auth --no-spec<br></code></pre></td></tr></table></figure></li><li><h4 id="创建服务"><a href="#创建服务" class="headerlink" title="创建服务"></a>创建<a href="https://docs.nestjs.com/providers#services">服务</a></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nest g s auth --no-spec<br></code></pre></td></tr></table></figure></li></ol></li><li><h3 id="创建路由"><a href="#创建路由" class="headerlink" title="创建路由"></a>创建<a href="https://docs.nestjs.com/controllers#routing">路由</a></h3><p><code>auth.controller.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Controller</span>, <span class="hljs-title class_">Post</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AuthService</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./auth.service&#x27;</span>;<br><br><span class="hljs-meta">@Controller</span>(<span class="hljs-string">&#x27;auth&#x27;</span>)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthController</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> auth: AuthService</span>) &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Post</span>(<span class="hljs-string">&#x27;register&#x27;</span>)<br>    <span class="hljs-title function_">register</span>(<span class="hljs-params"></span>) &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Post</span>(<span class="hljs-string">&#x27;login&#x27;</span>)<br>    <span class="hljs-title function_">login</span>(<span class="hljs-params"></span>) &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><h3 id="创建-DTO"><a href="#创建-DTO" class="headerlink" title="创建 DTO"></a>创建 <a href="https://docs.nestjs.com/controllers#request-payloads">DTO</a></h3><ol><li><p>在 auth 文件夹下创建 dto 文件夹</p></li><li><p>新建 <code>register.dto.ts</code> 和 <code>login.dto.ts</code> 文件</p></li><li><p><code>register.dto.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">IsNotEmpty</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;class-validator&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RegisterDto</span> &#123;<br>    <span class="hljs-meta">@IsNotEmpty</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;用户名不能为空&quot;</span> &#125;)<br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br><br>    <span class="hljs-meta">@IsNotEmpty</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;密码不能为空&quot;</span> &#125;)<br>    <span class="hljs-attr">password</span>: <span class="hljs-built_in">string</span><br><br>    <span class="hljs-meta">@IsNotEmpty</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;确认密码不能为空&quot;</span> &#125;)<br>    <span class="hljs-attr">password_confirm</span>: <span class="hljs-built_in">string</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>login.dto.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">IsNotEmpty</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;class-validator&quot;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginDto</span> &#123;<br>    <span class="hljs-meta">@IsNotEmpty</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;用户名不能为空&quot;</span> &#125;)<br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br><br>    <span class="hljs-meta">@IsNotEmpty</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;密码不能为空&quot;</span> &#125;)<br>    <span class="hljs-attr">password</span>: <span class="hljs-built_in">string</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><h3 id="配置-DTO"><a href="#配置-DTO" class="headerlink" title="配置 DTO"></a>配置 DTO</h3><p><code>auth.controller.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Body</span>, <span class="hljs-title class_">Controller</span>, <span class="hljs-title class_">Post</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AuthService</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./auth.service&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">LoginDto</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./dto/login.dto&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">RegisterDto</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./dto/register.dto&#x27;</span>;<br><br><span class="hljs-meta">@Controller</span>(<span class="hljs-string">&#x27;auth&#x27;</span>)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthController</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> auth: AuthService</span>) &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Post</span>(<span class="hljs-string">&#x27;register&#x27;</span>)<br>    <span class="hljs-title function_">register</span>(<span class="hljs-params"><span class="hljs-meta">@Body</span>() dto: RegisterDto</span>) &#123;<br>        <span class="hljs-keyword">return</span> dto<br>    &#125;<br><br>    <span class="hljs-meta">@Post</span>(<span class="hljs-string">&#x27;login&#x27;</span>)<br>    <span class="hljs-title function_">login</span>(<span class="hljs-params"><span class="hljs-meta">@Body</span>() dto: LoginDto</span>) &#123;<br>        <span class="hljs-keyword">return</span> dto<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><h3 id="创建自定义验证类"><a href="#创建自定义验证类" class="headerlink" title="创建自定义验证类"></a>创建自定义验证类</h3><p>新建 <code>common/validate.ts</code> 文件</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ValidationPipe</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@nestjs/common&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Validate</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">ValidationPipe</span> &#123;&#125;<br></code></pre></td></tr></table></figure></li><li><h3 id="配置全局管道"><a href="#配置全局管道" class="headerlink" title="配置全局管道"></a>配置全局管道</h3><p><code>main.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">NestFactory</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/core&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AppModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./app.module&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Validate</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./common/validate&#x27;</span>;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">bootstrap</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">await</span> <span class="hljs-title class_">NestFactory</span>.<span class="hljs-title function_">create</span>(<span class="hljs-title class_">AppModule</span>);<br>  <span class="hljs-comment">// 验证传入的参数是否符合条件</span><br>  app.<span class="hljs-title function_">useGlobalPipes</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Validate</span>())<br>  <span class="hljs-keyword">await</span> app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>);<br>&#125;<br><span class="hljs-title function_">bootstrap</span>();<br></code></pre></td></tr></table></figure></li><li><h3 id="接口测试"><a href="#接口测试" class="headerlink" title="接口测试"></a>接口测试</h3><ol><li><h4 id="登录接口-login"><a href="#登录接口-login" class="headerlink" title="登录接口  /login"></a>登录接口  <code>/login</code></h4><ol><li><h5 id="正确情况"><a href="#正确情况" class="headerlink" title="正确情况"></a>正确情况<img src="https://i.imgur.com/8N0vQ0U.png" alt="image-20221013135613093"></h5></li><li><h5 id="异常情况"><a href="#异常情况" class="headerlink" title="异常情况"></a>异常情况<img src="https://i.imgur.com/CwJT6Wz.png" alt="image-20221013135632909"></h5></li></ol></li><li><h4 id="注册接口-register"><a href="#注册接口-register" class="headerlink" title="注册接口 /register"></a>注册接口 <code>/register</code></h4><ol><li><h5 id="正确情况-1"><a href="#正确情况-1" class="headerlink" title="正确情况"></a>正确情况<img src="https://i.imgur.com/lTRUASB.png" alt="image-20221013135402998"></h5></li><li><h5 id="异常情况-1"><a href="#异常情况-1" class="headerlink" title="异常情况"></a>异常情况<img src="https://i.imgur.com/FpxKVGp.png" alt="image-20221013135322867"></h5></li></ol></li><li><h3 id="如果以上跟我显示的一样，恭喜你上线了两个简单的接口了-虽然还没做更多的验证功能"><a href="#如果以上跟我显示的一样，恭喜你上线了两个简单的接口了-虽然还没做更多的验证功能" class="headerlink" title="如果以上跟我显示的一样，恭喜你上线了两个简单的接口了 ( 虽然还没做更多的验证功能 )"></a>如果以上跟我显示的一样，恭喜你上线了两个简单的接口了 ( 虽然还没做更多的验证功能 )</h3></li></ol></li></ol><h2 id="四、自定义表单验证类"><a href="#四、自定义表单验证类" class="headerlink" title="四、自定义表单验证类"></a>四、<a href="https://github.com/typestack/class-validator#custom-validation-decorators">自定义表单验证类</a></h2><ol><li><h3 id="在-common-文件夹下创建-rules-文件夹"><a href="#在-common-文件夹下创建-rules-文件夹" class="headerlink" title="在 common 文件夹下创建 rules 文件夹"></a>在 <code>common</code> 文件夹下创建 <code>rules</code> 文件夹</h3></li><li><h3 id="创建-IsNotExists-ts-文件实现查找数据库中是否存在用户"><a href="#创建-IsNotExists-ts-文件实现查找数据库中是否存在用户" class="headerlink" title="创建 IsNotExists.ts 文件实现查找数据库中是否存在用户"></a>创建 <code>IsNotExists.ts</code> 文件实现查找数据库中是否存在用户</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">PrismaClient</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@prisma/client&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; registerDecorator, <span class="hljs-title class_">ValidationOptions</span>, <span class="hljs-title class_">ValidationArguments</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;class-validator&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">IsNotExists</span>(<span class="hljs-params">property: <span class="hljs-built_in">string</span>, validationOptions?: ValidationOptions</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-built_in">object</span>: <span class="hljs-built_in">Object</span>, propertyName: <span class="hljs-built_in">string</span></span>) &#123;<br>        <span class="hljs-title function_">registerDecorator</span>(&#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;IsNotExists&#x27;</span>,<br>            <span class="hljs-attr">target</span>: <span class="hljs-built_in">object</span>.<span class="hljs-property">constructor</span>,<br>            <span class="hljs-attr">propertyName</span>: propertyName,<br>            <span class="hljs-attr">constraints</span>: [property],<br>            <span class="hljs-attr">options</span>: validationOptions,<br>            <span class="hljs-attr">validator</span>: &#123;<br>                <span class="hljs-keyword">async</span> <span class="hljs-title function_">validate</span>(<span class="hljs-params">value: <span class="hljs-built_in">any</span>, args: ValidationArguments</span>) &#123;<br>                    <span class="hljs-keyword">const</span> prisma = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrismaClient</span>()<br>                    <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> prisma.<span class="hljs-property">user</span>.<span class="hljs-title function_">findFirst</span>(&#123;<br>                        <span class="hljs-attr">where</span>: &#123;<br>                            <span class="hljs-attr">name</span>: value<br>                        &#125;<br>                    &#125;)<br>                    <span class="hljs-keyword">return</span> !<span class="hljs-title class_">Boolean</span>(res);<br>                &#125;,<br>            &#125;,<br>        &#125;);<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><h3 id="创建-IsConfirm-ts-文件验证确认密码是否一致"><a href="#创建-IsConfirm-ts-文件验证确认密码是否一致" class="headerlink" title="创建 IsConfirm.ts 文件验证确认密码是否一致"></a>创建 <code>IsConfirm.ts</code> 文件验证确认密码是否一致</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; registerDecorator, <span class="hljs-title class_">ValidationOptions</span>, <span class="hljs-title class_">ValidationArguments</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;class-validator&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">IsConfirm</span>(<span class="hljs-params">validationOptions?: ValidationOptions</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-built_in">object</span>: <span class="hljs-built_in">Object</span>, propertyName: <span class="hljs-built_in">string</span></span>) &#123;<br>    <span class="hljs-title function_">registerDecorator</span>(&#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;IsConfirm&#x27;</span>,<br>      <span class="hljs-attr">target</span>: <span class="hljs-built_in">object</span>.<span class="hljs-property">constructor</span>,<br>      <span class="hljs-attr">propertyName</span>: propertyName,<br>      <span class="hljs-attr">constraints</span>: [],<br>      <span class="hljs-attr">options</span>: validationOptions,<br>      <span class="hljs-attr">validator</span>: &#123;<br>        <span class="hljs-keyword">async</span> <span class="hljs-title function_">validate</span>(<span class="hljs-params">value: <span class="hljs-built_in">any</span>, args: ValidationArguments</span>) &#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-title class_">Boolean</span>(value === args.<span class="hljs-property">object</span>[args.<span class="hljs-property">property</span>])<br>        &#125;,<br>      &#125;,<br>    &#125;);<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><h3 id="在注册-DTO-中引用"><a href="#在注册-DTO-中引用" class="headerlink" title="在注册 DTO 中引用"></a>在注册 DTO 中引用</h3><p><code>register.dto.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">IsNotEmpty</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;class-validator&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">IsNotExists</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;src/common/rules/IsNotExists&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RegisterDto</span> &#123;<br>    <span class="hljs-meta">@IsNotEmpty</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;用户名不能为空&quot;</span> &#125;)<br>    <span class="hljs-meta">@IsNotExists</span>(<span class="hljs-string">&#x27;user&#x27;</span>, &#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;用户已存在&#x27;</span> &#125;)<br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br><br>    <span class="hljs-meta">@IsNotEmpty</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;密码不能为空&quot;</span> &#125;)<br>    <span class="hljs-attr">password</span>: <span class="hljs-built_in">string</span><br><br>    <span class="hljs-meta">@IsNotEmpty</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;确认密码不能为空&quot;</span> &#125;)<br>    <span class="hljs-meta">@IsConfirm</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;两次密码不一致&quot;</span> &#125;)<br>    <span class="hljs-attr">password_confirm</span>: <span class="hljs-built_in">string</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><h3 id="自定义管道返回错误信息"><a href="#自定义管道返回错误信息" class="headerlink" title="自定义管道返回错误信息"></a>自定义管道返回错误信息</h3><p><code>common/validate.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">HttpException</span>, <span class="hljs-title class_">HttpStatus</span>, <span class="hljs-title class_">ValidationError</span>, <span class="hljs-title class_">ValidationPipe</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@nestjs/common&quot;</span>;<br><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Validate</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">ValidationPipe</span> &#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-title function_">flattenValidationErrors</span>(<span class="hljs-attr">validationErrors</span>: <span class="hljs-title class_">ValidationError</span>[]): <span class="hljs-built_in">string</span>[] &#123;<br>        <span class="hljs-keyword">const</span> message = &#123;&#125;<br>        validationErrors.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>            message[error.<span class="hljs-property">property</span>] = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">values</span>(error.<span class="hljs-property">constraints</span>)[<span class="hljs-number">0</span>]<br>        &#125;)<br><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpException</span>(&#123;<br>            <span class="hljs-attr">success</span>: <span class="hljs-literal">false</span>,<br>            <span class="hljs-attr">code</span>: <span class="hljs-number">422</span>,<br>            message<br>        &#125;,<br>            <span class="hljs-title class_">HttpStatus</span>.<span class="hljs-property">UNPROCESSABLE_ENTITY</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><h3 id="接口测试-1"><a href="#接口测试-1" class="headerlink" title="接口测试"></a>接口测试</h3><p><img src="https://i.imgur.com/0IuiTQt.png" alt="image-20221013160602109"></p><p><img src="https://i.imgur.com/TP9bTrV.png" alt="image-20221013160630385"></p></li></ol><h2 id="五、完成注册功能"><a href="#五、完成注册功能" class="headerlink" title="五、完成注册功能"></a>五、完成注册功能</h2><ol><li><h4 id="创建-Prisma-模块用于写入数据库"><a href="#创建-Prisma-模块用于写入数据库" class="headerlink" title="创建 Prisma 模块用于写入数据库"></a>创建 Prisma 模块用于写入数据库</h4><ol><li><h5 id="创建模块-1"><a href="#创建模块-1" class="headerlink" title="创建模块"></a>创建模块</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nest g mo prisma --no-spec<br></code></pre></td></tr></table></figure></li><li><h5 id="创建服务-1"><a href="#创建服务-1" class="headerlink" title="创建服务"></a>创建服务</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nest g s prisma --no-spec<br></code></pre></td></tr></table></figure></li></ol></li><li><h4 id="注册-Prisma-模块为全局模块"><a href="#注册-Prisma-模块为全局模块" class="headerlink" title="注册 Prisma 模块为全局模块"></a>注册 Prisma 模块为全局模块</h4><p><code>prisma.module.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Global</span>, <span class="hljs-title class_">Module</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">PrismaService</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./prisma.service&#x27;</span>;<br><br><span class="hljs-meta">@Global</span>()<br><span class="hljs-meta">@Module</span>(&#123;<br>  <span class="hljs-attr">providers</span>: [<span class="hljs-title class_">PrismaService</span>],<br>  <span class="hljs-attr">exports</span>: [<span class="hljs-title class_">PrismaService</span>]<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrismaModule</span> &#123;&#125;<br></code></pre></td></tr></table></figure></li><li><h4 id="Prisma-服务继承-PrismaClient"><a href="#Prisma-服务继承-PrismaClient" class="headerlink" title="Prisma 服务继承 PrismaClient"></a>Prisma 服务继承 <code>PrismaClient</code></h4><p><code>prisma.service.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Injectable</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">PrismaClient</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@prisma/client&#x27;</span>;<br><br><span class="hljs-meta">@Injectable</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrismaService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">PrismaClient</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// 打印执行 SQL 语句</span><br>        <span class="hljs-variable language_">super</span>(&#123; <span class="hljs-attr">log</span>: [<span class="hljs-string">&#x27;query&#x27;</span>] &#125;)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><h4 id="Auth-服务引入-Prisma-服务并写入注册方法"><a href="#Auth-服务引入-Prisma-服务并写入注册方法" class="headerlink" title="Auth 服务引入 Prisma 服务并写入注册方法"></a>Auth 服务引入 Prisma 服务并写入注册方法</h4><p><code>auth.service.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Injectable</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; hash &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;argon2&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">PrismaService</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;src/prisma/prisma.service&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">RegisterDto</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./dto/register.dto&#x27;</span>;<br><br><span class="hljs-meta">@Injectable</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthService</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> prisma: PrismaService</span>) &#123;<br><br>    &#125;<br>    <span class="hljs-keyword">async</span> <span class="hljs-title function_">register</span>(<span class="hljs-params">dto: RegisterDto</span>) &#123;<br>        <span class="hljs-keyword">const</span> user = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">prisma</span>.<span class="hljs-property">user</span>.<span class="hljs-title function_">create</span>(&#123;<br>            <span class="hljs-attr">data</span>: &#123;<br>                <span class="hljs-attr">name</span>: dto.<span class="hljs-property">name</span>,<br>                <span class="hljs-attr">password</span>: <span class="hljs-keyword">await</span> <span class="hljs-title function_">hash</span>(dto.<span class="hljs-property">password</span>)<br>            &#125;<br>        &#125;)<br><br>        <span class="hljs-keyword">const</span> res = &#123;<br>            <span class="hljs-attr">success</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">code</span>: <span class="hljs-number">201</span>,<br>            <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;注册成功&quot;</span><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> res<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><h4 id="Auth-控制器中的调用-Auth-服务传递注册-DTO-到注册方法"><a href="#Auth-控制器中的调用-Auth-服务传递注册-DTO-到注册方法" class="headerlink" title="Auth 控制器中的调用 Auth 服务传递注册 DTO 到注册方法"></a>Auth 控制器中的调用 Auth 服务传递注册 DTO 到注册方法</h4><p><code>auth.controller.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Body</span>, <span class="hljs-title class_">Controller</span>, <span class="hljs-title class_">Post</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AuthService</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./auth.service&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">LoginDto</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./dto/login.dto&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">RegisterDto</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./dto/register.dto&#x27;</span>;<br><br><span class="hljs-meta">@Controller</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthController</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> auth: AuthService</span>) &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Post</span>(<span class="hljs-string">&#x27;register&#x27;</span>)<br>    <span class="hljs-title function_">register</span>(<span class="hljs-params"><span class="hljs-meta">@Body</span>() dto: RegisterDto</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">auth</span>.<span class="hljs-title function_">register</span>(dto)<br>    &#125;<br><br>    <span class="hljs-meta">@Post</span>(<span class="hljs-string">&#x27;login&#x27;</span>)<br>    <span class="hljs-title function_">login</span>(<span class="hljs-params"><span class="hljs-meta">@Body</span>() dto: LoginDto</span>) &#123;<br>        <span class="hljs-keyword">return</span> dto<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><h4 id="接口测试-2"><a href="#接口测试-2" class="headerlink" title="接口测试"></a>接口测试</h4><p><img src="https://i.imgur.com/0b9VXR5.png" alt="image-20221013171839389"></p><p>查看数据库，用户已添加</p><p><img src="https://i.imgur.com/PQRJxS4.png" alt="image-20221013171904961"></p></li></ol><h2 id="六、Jwt-模块"><a href="#六、Jwt-模块" class="headerlink" title="六、Jwt 模块"></a>六、Jwt 模块</h2><ol><li><h3 id="引用在-Auth-模块中引入并注册-JwtModule-模块"><a href="#引用在-Auth-模块中引入并注册-JwtModule-模块" class="headerlink" title="引用在 Auth 模块中引入并注册 JwtModule 模块"></a>引用在 Auth 模块中引入并注册 JwtModule 模块</h3><p><code>auth.module.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ConfigModule</span>, <span class="hljs-title class_">ConfigService</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/config&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">JwtModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/jwt&#x27;</span>;<br><br><span class="hljs-meta">@Module</span>(&#123;<br>  <span class="hljs-attr">imports</span>: [<span class="hljs-title class_">JwtModule</span>.<span class="hljs-title function_">registerAsync</span>(&#123;<br>    <span class="hljs-attr">imports</span>: [<span class="hljs-title class_">ConfigModule</span>],<br>    <span class="hljs-attr">inject</span>: [<span class="hljs-title class_">ConfigService</span>],<br>    <span class="hljs-attr">useFactory</span>: <span class="hljs-function">(<span class="hljs-params">config: ConfigService</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">secret</span>: config.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;TOKEN_SECRET&#x27;</span>),<br>        <span class="hljs-attr">signOptions</span>: &#123; <span class="hljs-attr">expiresIn</span>: <span class="hljs-string">&#x27;1d&#x27;</span> &#125;<br>      &#125;<br>    &#125;<br>  &#125;)],<br>  <span class="hljs-attr">controllers</span>: [<span class="hljs-title class_">AuthController</span>],<br>  <span class="hljs-attr">providers</span>: [<span class="hljs-title class_">AuthService</span>]<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><h3 id="写入-Token-密钥"><a href="#写入-Token-密钥" class="headerlink" title="写入 Token 密钥"></a>写入 Token 密钥</h3><ol><li><h4 id="因为加密-Token-需要密钥，而密钥通过-ConfigModule-模块来引入"><a href="#因为加密-Token-需要密钥，而密钥通过-ConfigModule-模块来引入" class="headerlink" title="因为加密 Token 需要密钥，而密钥通过 ConfigModule 模块来引入"></a>因为加密 Token 需要密钥，而密钥通过 ConfigModule 模块来引入</h4></li><li><h4 id="在-env-文件中写入-TOKEN-SECRET-字段作为-Token-密钥"><a href="#在-env-文件中写入-TOKEN-SECRET-字段作为-Token-密钥" class="headerlink" title="在 .env 文件中写入 TOKEN_SECRET 字段作为 Token 密钥"></a>在 <code>.env</code> 文件中写入 <code>TOKEN_SECRET</code> 字段作为 Token 密钥</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">TOKEN_SECRET=&quot;你的密钥&quot;<br></code></pre></td></tr></table></figure></li><li><h4 id="通过-ConfigService-读取-env-文件的-TOKEN-SECRET-字段"><a href="#通过-ConfigService-读取-env-文件的-TOKEN-SECRET-字段" class="headerlink" title="通过 ConfigService 读取 .env 文件的 TOKEN_SECRET 字段"></a>通过 ConfigService 读取 <code>.env</code> 文件的 <code>TOKEN_SECRET</code> 字段</h4></li></ol></li><li><h3 id="在-Auth-服务中引入-JwtService"><a href="#在-Auth-服务中引入-JwtService" class="headerlink" title="在 Auth 服务中引入 JwtService"></a>在 <code>Auth</code> 服务中引入 <code>JwtService</code></h3><p><code>auth.service.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">JwtService</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/jwt&#x27;</span>;<br><br><span class="hljs-comment">// ...</span><br><span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> prisma: PrismaService, <span class="hljs-keyword">private</span> jwt: JwtService</span>) &#123;<br><br>    &#125;<br><span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></figure></li><li><h3 id="在-Auth-服务中写入生成-Token-函数"><a href="#在-Auth-服务中写入生成-Token-函数" class="headerlink" title="在 Auth 服务中写入生成 Token 函数"></a>在 <code>Auth</code> 服务中写入生成 Token 函数</h3><p><code>auth.service.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// ...</span><br><span class="hljs-comment">// 生成 Jwt Token</span><br>    <span class="hljs-keyword">async</span> <span class="hljs-title function_">token</span>(<span class="hljs-params">&#123; name, id &#125;</span>) &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">token</span>: <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">jwt</span>.<span class="hljs-title function_">signAsync</span>(&#123;<br>                name,<br>                <span class="hljs-attr">sub</span>: id<br>            &#125;)<br>        &#125;<br>    &#125;<br><span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="七、利用全局拦截器完善接口返回结果"><a href="#七、利用全局拦截器完善接口返回结果" class="headerlink" title="七、利用全局拦截器完善接口返回结果"></a>七、利用全局拦截器完善接口返回结果</h2><ol><li><h3 id="在-src-目录下创建-transform-interceptor-ts-文件"><a href="#在-src-目录下创建-transform-interceptor-ts-文件" class="headerlink" title="在 src 目录下创建 transform.interceptor.ts 文件"></a>在 src 目录下创建 <code>transform.interceptor.ts</code> 文件</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">CallHandler</span>, <span class="hljs-title class_">ExecutionContext</span>, <span class="hljs-title class_">Injectable</span>, <span class="hljs-title class_">NestInterceptor</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span><br><span class="hljs-keyword">import</span> &#123; map &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;rxjs/operators&#x27;</span><br><br><span class="hljs-meta">@Injectable</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransformInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">NestInterceptor</span> &#123;<br>    <span class="hljs-title function_">intercept</span>(<span class="hljs-params">context: ExecutionContext, next: CallHandler</span>) &#123;<br>        <span class="hljs-keyword">return</span> next.<span class="hljs-title function_">handle</span>().<span class="hljs-title function_">pipe</span>(<br>            <span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>                <span class="hljs-keyword">return</span> &#123;<br>                    data,<br>                &#125;<br>            &#125;),<br>        )<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><h3 id="在-main-ts-文件中应用全局拦截器"><a href="#在-main-ts-文件中应用全局拦截器" class="headerlink" title="在 main.ts 文件中应用全局拦截器"></a>在 <code>main.ts</code> 文件中应用全局拦截器</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">TransformInterceptor</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./transform.interceptor&#x27;</span>;<br><br><span class="hljs-comment">// ...</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">bootstrap</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">await</span> <span class="hljs-title class_">NestFactory</span>.<span class="hljs-title function_">create</span>(<span class="hljs-title class_">AppModule</span>);<br>  <span class="hljs-comment">// 验证传入的参数是否符合条件</span><br>  app.<span class="hljs-title function_">useGlobalPipes</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Validate</span>())<br>  <span class="hljs-comment">// 全局拦截器</span><br>  app.<span class="hljs-title function_">useGlobalInterceptors</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformInterceptor</span>())<br>  <span class="hljs-keyword">await</span> app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>);<br>&#125;<br><span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></figure></li><li><h3 id="接口测试-3"><a href="#接口测试-3" class="headerlink" title="接口测试"></a>接口测试</h3><p><img src="https://i.imgur.com/jP4lK4H.png" alt="image-20221014103451676"></p><p>返回结果包含在 <code>data</code> 对象当中</p></li></ol><h2 id="八、完成登录功能"><a href="#八、完成登录功能" class="headerlink" title="八、完成登录功能"></a>八、完成登录功能</h2><ol><li><h3 id="在-common-rules-文件夹下创建-IsExists-ts-文件"><a href="#在-common-rules-文件夹下创建-IsExists-ts-文件" class="headerlink" title="在 common/rules 文件夹下创建 IsExists.ts 文件"></a>在 <code>common/rules</code> 文件夹下创建 <code>IsExists.ts</code> 文件</h3></li><li><h3 id="在-IsExists-ts-实现查找数据库中是否存在用户"><a href="#在-IsExists-ts-实现查找数据库中是否存在用户" class="headerlink" title="在 IsExists.ts 实现查找数据库中是否存在用户"></a>在 <code>IsExists.ts</code> 实现查找数据库中是否存在用户</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">PrismaClient</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@prisma/client&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; registerDecorator, <span class="hljs-title class_">ValidationOptions</span>, <span class="hljs-title class_">ValidationArguments</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;class-validator&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">IsExists</span>(<span class="hljs-params">property: <span class="hljs-built_in">string</span>, validationOptions?: ValidationOptions</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-built_in">object</span>: <span class="hljs-built_in">Object</span>, propertyName: <span class="hljs-built_in">string</span></span>) &#123;<br>        <span class="hljs-title function_">registerDecorator</span>(&#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;IsExists&#x27;</span>,<br>            <span class="hljs-attr">target</span>: <span class="hljs-built_in">object</span>.<span class="hljs-property">constructor</span>,<br>            <span class="hljs-attr">propertyName</span>: propertyName,<br>            <span class="hljs-attr">constraints</span>: [property],<br>            <span class="hljs-attr">options</span>: validationOptions,<br>            <span class="hljs-attr">validator</span>: &#123;<br>                <span class="hljs-keyword">async</span> <span class="hljs-title function_">validate</span>(<span class="hljs-params">value: <span class="hljs-built_in">any</span>, args: ValidationArguments</span>) &#123;<br>                    <span class="hljs-keyword">const</span> prisma = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrismaClient</span>()<br>                    <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> prisma.<span class="hljs-property">user</span>.<span class="hljs-title function_">findFirst</span>(&#123;<br>                        <span class="hljs-attr">where</span>: &#123;<br>                            <span class="hljs-attr">name</span>: value<br>                        &#125;<br>                    &#125;)<br>                    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Boolean</span>(res);<br>                &#125;,<br>            &#125;,<br>        &#125;);<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><h3 id="在登录-DTO-引用"><a href="#在登录-DTO-引用" class="headerlink" title="在登录 DTO 引用"></a>在登录 DTO 引用</h3><p><code>login.dto.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">IsExists</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;src/common/rules/IsExists&quot;</span><br><br><span class="hljs-comment">// ...</span><br>    <span class="hljs-meta">@IsNotEmpty</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;用户名不能为空&quot;</span> &#125;)<br>    <span class="hljs-meta">@IsExists</span>(<span class="hljs-string">&#x27;user&#x27;</span>, &#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;用户不存在&quot;</span> &#125;)<br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><br><span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></figure></li><li><h3 id="登录成功返回-Token"><a href="#登录成功返回-Token" class="headerlink" title="登录成功返回 Token"></a>登录成功返回 Token</h3><ol><li><p>Auth 模块控制器调用 Auth 模块服务</p><p><code>auth.controller.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// ...</span><br><span class="hljs-comment">// 登录</span><br>    <span class="hljs-meta">@Post</span>(<span class="hljs-string">&#x27;login&#x27;</span>)<br>    <span class="hljs-title function_">login</span>(<span class="hljs-params"><span class="hljs-meta">@Body</span>() dto: LoginDto</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">auth</span>.<span class="hljs-title function_">login</span>(dto)<br>    &#125;<br><span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></figure></li><li><p>Auth 模块服务校验密码</p><p><code>auth.service.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// ...</span><br><span class="hljs-comment">// 登录</span><br>    <span class="hljs-keyword">async</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">dto: LoginDto</span>) &#123;<br>        <span class="hljs-keyword">const</span> user = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">prisma</span>.<span class="hljs-property">user</span>.<span class="hljs-title function_">findUnique</span>(&#123;<br>            <span class="hljs-attr">where</span>: &#123;<br>                <span class="hljs-attr">name</span>: dto.<span class="hljs-property">name</span><br>            &#125;<br>        &#125;)<br>        <span class="hljs-comment">// 校验密码</span><br>        <span class="hljs-keyword">if</span> (!(<span class="hljs-keyword">await</span> <span class="hljs-title function_">verify</span>(user.<span class="hljs-property">password</span>, dto.<span class="hljs-property">password</span>))) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadRequestException</span>(<span class="hljs-string">&quot;密码错误&quot;</span>)<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">token</span>(user)<br>    &#125;<br><span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></figure></li></ol></li><li><h3 id="接口测试-4"><a href="#接口测试-4" class="headerlink" title="接口测试"></a>接口测试</h3><ol><li><p>正常情况</p><p><img src="https://i.imgur.com/oeHQa49.png" alt="image-20221014110032065"></p></li><li><p>异常情况<img src="https://i.imgur.com/KXmsDOP.png" alt="image-20221014104700222"></p><p><img src="https://i.imgur.com/f2IzjJz.png" alt="image-20221014105956215"></p></li></ol></li></ol><h2 id="九、一键生成文件模块增删改查接口"><a href="#九、一键生成文件模块增删改查接口" class="headerlink" title="九、一键生成文件模块增删改查接口"></a>九、一键生成文件模块增删改查接口</h2><p>假设你通过前面文档的学习，已经了解了模块、控制器、服务等概念知识。如果像前面那样还要一个模块一个服务创建的话有就点麻烦了。</p><p>Nest.JS 提供了一键生成增删改查的命令，这里拿生成文章模块来举例。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell">nest g res article<br><br>? What transport layer do you use? (Use arrow keys)<br>❯ REST API <br>  GraphQL (code first) <br>  GraphQL (schema first) <br>  Microservice (non-HTTP) <br>  WebSockets <br><br>? Would you like to generate CRUD entry points? (Y/n) Y<br><br>CREATE src/article/article.controller.spec.ts (586 bytes)<br>CREATE src/article/article.controller.ts (946 bytes)<br>CREATE src/article/article.module.ts (261 bytes)<br>CREATE src/article/article.service.spec.ts (467 bytes)<br>CREATE src/article/article.service.ts (649 bytes)<br>CREATE src/article/dto/create-article.dto.ts (33 bytes)<br>CREATE src/article/dto/update-article.dto.ts (181 bytes)<br>CREATE src/article/entities/article.entity.ts (24 bytes)<br>UPDATE src/app.module.ts (334 bytes)<br></code></pre></td></tr></table></figure><p><img src="https://i.imgur.com/Mmx2shB.png" alt="image-20221014142034780"></p><p>非常方便快捷</p><h2 id="十、文章列表接口"><a href="#十、文章列表接口" class="headerlink" title="十、文章列表接口"></a>十、文章列表接口</h2><ol><li><h3 id="Article-服务引入-Prisma-服务和-ConfigModule-服务"><a href="#Article-服务引入-Prisma-服务和-ConfigModule-服务" class="headerlink" title="Article 服务引入 Prisma 服务和 ConfigModule 服务"></a>Article 服务引入 Prisma 服务和 ConfigModule 服务</h3><p><code>article.service.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ConfigService</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/config&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">PrismaService</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;src/prisma/prisma.service&#x27;</span>;<br><br><span class="hljs-comment">// ...</span><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> prisma: PrismaService, <span class="hljs-keyword">private</span> config: ConfigService</span>) &#123;<br><br>  &#125;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><h3 id="查询全部文章"><a href="#查询全部文章" class="headerlink" title="查询全部文章"></a>查询全部文章</h3><p><code>article.service.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// ...  </span><br><span class="hljs-keyword">async</span> <span class="hljs-title function_">findAll</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> articles = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">prisma</span>.<span class="hljs-property">article</span>.<span class="hljs-title function_">findMany</span>()<br>    <span class="hljs-keyword">return</span> articles<br>  &#125;<br><span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></figure><p><img src="https://i.imgur.com/2mmUROf.png" alt="image-20221014144139744"></p></li><li><h3 id="在-app-module-ts-全局引入-ConfigModule"><a href="#在-app-module-ts-全局引入-ConfigModule" class="headerlink" title="在 app.module.ts 全局引入 ConfigModule"></a>在 <code>app.module.ts</code> 全局引入 ConfigModule</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// ...</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ConfigModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/config&#x27;</span>;<br><br><br><span class="hljs-meta">@Module</span>(&#123;<br>  <span class="hljs-attr">imports</span>: [<span class="hljs-title class_">AuthModule</span>, <span class="hljs-title class_">PrismaModule</span>, <span class="hljs-title class_">ArticleModule</span>, <span class="hljs-title class_">ConfigModule</span>.<span class="hljs-title function_">forRoot</span>(&#123;<br>    <span class="hljs-attr">isGlobal</span>: <span class="hljs-literal">true</span><br>  &#125;)],<br>  <span class="hljs-attr">controllers</span>: [],<br>  <span class="hljs-attr">providers</span>: [],<br>&#125;)<br><span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></figure></li><li><h3 id="在-env-文件写入每页文章显示数"><a href="#在-env-文件写入每页文章显示数" class="headerlink" title="在 .env 文件写入每页文章显示数"></a>在 <code>.env</code> 文件写入每页文章显示数</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text"># 每页显示 10 行<br>ARTICLE_PAGE_ROW=10<br></code></pre></td></tr></table></figure></li><li><h3 id="在-article-service-ts-引入-ARTICLE-PAGE-ROW-字段"><a href="#在-article-service-ts-引入-ARTICLE-PAGE-ROW-字段" class="headerlink" title="在 article.service.ts 引入 ARTICLE_PAGE_ROW 字段"></a>在 <code>article.service.ts</code> 引入 <code>ARTICLE_PAGE_ROW</code> 字段</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// ...</span><br><span class="hljs-keyword">async</span> <span class="hljs-title function_">findAll</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> articles = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">prisma</span>.<span class="hljs-property">article</span>.<span class="hljs-title function_">findMany</span>()<br>    <span class="hljs-keyword">const</span> pageSize = <span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;ARTICLE_PAGE_ROW&#x27;</span>)<br>    <span class="hljs-keyword">return</span> articles<br>  &#125;<br><span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></figure></li><li><h3 id="返回结果分页"><a href="#返回结果分页" class="headerlink" title="返回结果分页"></a>返回结果分页</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/// ...</span><br><span class="hljs-keyword">async</span> <span class="hljs-title function_">findAll</span>(<span class="hljs-params">page = <span class="hljs-number">1</span></span>) &#123;<br>    <span class="hljs-comment">// 每页总数</span><br>    <span class="hljs-keyword">const</span> pageSize = +<span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;ARTICLE_PAGE_ROW&#x27;</span>)<br>    <span class="hljs-comment">// 文章列表</span><br>    <span class="hljs-keyword">const</span> articles = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">prisma</span>.<span class="hljs-property">article</span>.<span class="hljs-title function_">findMany</span>(&#123;<br>      <span class="hljs-attr">take</span>: pageSize,<br>      <span class="hljs-attr">skip</span>: (page - <span class="hljs-number">1</span>) * pageSize<br>    &#125;)<br>    <span class="hljs-comment">// 文章总数</span><br>    <span class="hljs-keyword">const</span> total = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">prisma</span>.<span class="hljs-property">article</span>.<span class="hljs-title function_">count</span>()<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">meta</span>: &#123; <span class="hljs-attr">currPage</span>: page, pageSize, total, <span class="hljs-attr">totalPage</span>: <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(total / pageSize) &#125;,<br>      <span class="hljs-attr">data</span>: articles,<br>    &#125;<br>  &#125;<br><span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></figure><p><img src="https://i.imgur.com/S8Xq4ai.png" alt="image-20221014145336954"></p><p>返回了 <code>ARTICLE_PAGE_ROW</code> 中定义的 10 行</p></li><li><h3 id="在-Article-控制器传入-page"><a href="#在-Article-控制器传入-page" class="headerlink" title="在 Article 控制器传入 page"></a>在 Article 控制器传入 page</h3></li><li><h3 id="接口测试-5"><a href="#接口测试-5" class="headerlink" title="接口测试"></a>接口测试</h3><p><img src="https://i.imgur.com/z0pNYRL.png" alt="image-20221014155457652"></p></li></ol><h2 id="十一、文章详情接口"><a href="#十一、文章详情接口" class="headerlink" title="十一、文章详情接口"></a>十一、文章详情接口</h2><ol><li><h3 id="article-service-ts"><a href="#article-service-ts" class="headerlink" title="article.service.ts"></a><code>article.service.ts</code></h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 文章详情</span><br><span class="hljs-keyword">async</span> <span class="hljs-title function_">findOne</span>(<span class="hljs-params">id: <span class="hljs-built_in">number</span></span>) &#123;<br>  <span class="hljs-keyword">const</span> article = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">prisma</span>.<span class="hljs-property">article</span>.<span class="hljs-title function_">findUnique</span>(&#123;<br>    <span class="hljs-attr">where</span>: &#123; id &#125;<br>  &#125;)<br>  <span class="hljs-keyword">return</span> article<br>&#125;<br></code></pre></td></tr></table></figure></li><li><h3 id="接口测试-6"><a href="#接口测试-6" class="headerlink" title="接口测试"></a>接口测试<img src="https://i.imgur.com/2g16WdK.png" alt="image-20221014160844349"></h3></li></ol><h2 id="十二、添加文章接口"><a href="#十二、添加文章接口" class="headerlink" title="十二、添加文章接口"></a>十二、添加文章接口</h2><ol><li><h3 id="article-service-ts-1"><a href="#article-service-ts-1" class="headerlink" title="article.service.ts"></a><code>article.service.ts</code></h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 添加文章</span><br><span class="hljs-keyword">async</span> <span class="hljs-title function_">create</span>(<span class="hljs-params">createArticleDto: CreateArticleDto</span>) &#123;<br>  <span class="hljs-keyword">const</span> article = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">prisma</span>.<span class="hljs-property">article</span>.<span class="hljs-title function_">create</span>(&#123;<br>    <span class="hljs-attr">data</span>: createArticleDto<br>  &#125;)<br>  <span class="hljs-keyword">return</span> article<br>&#125;<br></code></pre></td></tr></table></figure></li><li><h3 id="接口测试-7"><a href="#接口测试-7" class="headerlink" title="接口测试"></a>接口测试<img src="https://i.imgur.com/ra6glKG.png" alt="image-20221014162134701"></h3></li></ol><h2 id="十三、修改文章接口"><a href="#十三、修改文章接口" class="headerlink" title="十三、修改文章接口"></a>十三、修改文章接口</h2><ol><li><h3 id="article-service-ts-2"><a href="#article-service-ts-2" class="headerlink" title="article.service.ts"></a><code>article.service.ts</code></h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 修改文章</span><br> <span class="hljs-keyword">async</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">id: <span class="hljs-built_in">number</span>, updateArticleDto: UpdateArticleDto</span>) &#123;<br>   <span class="hljs-keyword">const</span> article = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">prisma</span>.<span class="hljs-property">article</span>.<span class="hljs-title function_">update</span>(&#123;<br>     <span class="hljs-attr">where</span>: &#123; id &#125;,<br>     <span class="hljs-attr">data</span>: updateArticleDto<br>   &#125;)<br>   <span class="hljs-keyword">return</span> article<br> &#125;<br></code></pre></td></tr></table></figure></li><li><h3 id="接口测试-8"><a href="#接口测试-8" class="headerlink" title="接口测试"></a>接口测试<img src="https://i.imgur.com/x2nDMXV.png" alt="image-20221014163244820"></h3></li></ol><h2 id="十四、删除文章接口"><a href="#十四、删除文章接口" class="headerlink" title="十四、删除文章接口"></a>十四、删除文章接口</h2><ol><li><h3 id="article-service-ts-3"><a href="#article-service-ts-3" class="headerlink" title="article.service.ts"></a><code>article.service.ts</code></h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 删除文章</span><br><span class="hljs-title function_">remove</span>(<span class="hljs-params">id: <span class="hljs-built_in">number</span></span>) &#123;<br>  <span class="hljs-keyword">const</span> article = <span class="hljs-variable language_">this</span>.<span class="hljs-property">prisma</span>.<span class="hljs-property">article</span>.<span class="hljs-title function_">delete</span>(&#123;<br>    <span class="hljs-attr">where</span>: &#123; id &#125;<br>  &#125;)<br>  <span class="hljs-keyword">return</span> <br>&#125;<br></code></pre></td></tr></table></figure></li><li><h3 id="接口测试-9"><a href="#接口测试-9" class="headerlink" title="接口测试"></a>接口测试<img src="https://i.imgur.com/EdT3Pju.png" alt="image-20221014162635882"></h3></li></ol><h2 id="十五、设置-API-前缀"><a href="#十五、设置-API-前缀" class="headerlink" title="十五、设置 API 前缀"></a>十五、设置 API 前缀</h2><p>因为 Nest.JS 可以使用 Express 底层，如果想前端和后端项目跑在同一个域名，需要设置 API 前缀。</p><ol><li><h3 id="在-main-ts-定义为-Express-应用"><a href="#在-main-ts-定义为-Express-应用" class="headerlink" title="在 main.ts 定义为 Express 应用"></a>在 <code>main.ts</code> 定义为 Express 应用</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">NestExpressApplication</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/platform-express&#x27;</span>;<br><br><span class="hljs-comment">// ...</span><br><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">await</span> <span class="hljs-title class_">NestFactory</span>.<span class="hljs-property">create</span>&lt;<span class="hljs-title class_">NestExpressApplication</span>&gt;(<span class="hljs-title class_">AppModule</span>);<br><span class="hljs-comment">// ...</span><br><span class="hljs-comment">// API 前缀</span><br>  app.<span class="hljs-title function_">setGlobalPrefix</span>(<span class="hljs-string">&#x27;api&#x27;</span>)<br><span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></figure></li><li><h3 id="接口测试-10"><a href="#接口测试-10" class="headerlink" title="接口测试"></a>接口测试</h3><ol><li>旧 API URL 地址报404<img src="https://i.imgur.com/jdgNOKB.png"></li><li>新 API URL 地址正常<img src="https://i.imgur.com/zLh4Mgs.png" alt="image-20221017145640982"></li></ol></li></ol><h2 id="十六、添加栏目模型"><a href="#十六、添加栏目模型" class="headerlink" title="十六、添加栏目模型"></a>十六、添加栏目模型</h2><ol><li><h3 id="schema-prisma"><a href="#schema-prisma" class="headerlink" title="schema.prisma"></a><code>schema.prisma</code></h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs text">// ...<br>model category &#123;<br>  id       Int       @id @default(autoincrement()) @db.UnsignedInt<br>  title    String<br>  articles article[]<br>&#125;<br><br>model article &#123;<br>  id         Int      @id @default(autoincrement()) @db.UnsignedInt<br>  title      String<br>  content    String   @db.Text<br>  category   category @relation(fields: [categoryId], references: [id], onDelete: Cascade)<br>  categoryId Int      @db.UnsignedInt<br>&#125;<br>// ...<br></code></pre></td></tr></table></figure></li><li><h3 id="数据填充-seed-ts"><a href="#数据填充-seed-ts" class="headerlink" title="数据填充 seed.ts"></a>数据填充 <code>seed.ts</code></h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs typescript">    <span class="hljs-comment">// ...</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>        <span class="hljs-keyword">await</span> prisma.<span class="hljs-property">category</span>.<span class="hljs-title function_">create</span>(&#123;<br>            <span class="hljs-attr">data</span>: &#123;<br>                <span class="hljs-attr">title</span>: <span class="hljs-title class_">Random</span>.<span class="hljs-title function_">ctitle</span>(<span class="hljs-number">3</span>, <span class="hljs-number">6</span>),<br>            &#125;<br>        &#125;)<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">50</span>; i++) &#123;<br>        <span class="hljs-keyword">await</span> prisma.<span class="hljs-property">article</span>.<span class="hljs-title function_">create</span>(&#123;<br>            <span class="hljs-attr">data</span>: &#123;<br>                <span class="hljs-attr">title</span>: <span class="hljs-title class_">Random</span>.<span class="hljs-title function_">ctitle</span>(<span class="hljs-number">10</span>, <span class="hljs-number">30</span>),<br>                <span class="hljs-attr">content</span>: <span class="hljs-title class_">Random</span>.<span class="hljs-title function_">cparagraph</span>(<span class="hljs-number">30</span>, <span class="hljs-number">40</span>),<br>                <span class="hljs-attr">categoryId</span>: _.<span class="hljs-title function_">random</span>(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>)<br>            &#125;<br>        &#125;)<br>    &#125;<br>    <span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></figure></li><li><h3 id="tsconfig-json-添加一行，否则-loadsh-会报错"><a href="#tsconfig-json-添加一行，否则-loadsh-会报错" class="headerlink" title="tsconfig.json 添加一行，否则 loadsh 会报错"></a><code>tsconfig.json</code> 添加一行，否则 loadsh 会报错</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;esModuleInterop&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br></code></pre></td></tr></table></figure></li><li><h3 id="更新迁移文件"><a href="#更新迁移文件" class="headerlink" title="更新迁移文件"></a>更新迁移文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npx prisma migrate reset<br></code></pre></td></tr></table></figure><p>直接运行可能会报错，在 MySQL 命令行中执行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">TRUNCATE</span> article<br></code></pre></td></tr></table></figure><p>然后重新跑一遍更新迁移文件</p></li><li><h3 id="数据库添加成功"><a href="#数据库添加成功" class="headerlink" title="数据库添加成功"></a>数据库添加成功</h3><ol><li><p><code>category</code> 表</p><p><img src="https://i.imgur.com/f4nxCh2.png" alt="image-20221017152013359"></p></li><li><p><code>article</code> 表</p><p><img src="https://i.imgur.com/UptbGRI.png" alt="image-20221017152030853"></p></li></ol></li></ol><h2 id="十七、栏目增删改查"><a href="#十七、栏目增删改查" class="headerlink" title="十七、栏目增删改查"></a>十七、栏目增删改查</h2><ol><li><h3 id="category-service-ts"><a href="#category-service-ts" class="headerlink" title="category.service.ts"></a><code>category.service.ts</code></h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Injectable</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">PrismaService</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;src/prisma/prisma.service&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">CreateCategoryDto</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./dto/create-category.dto&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">UpdateCategoryDto</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./dto/update-category.dto&#x27;</span>;<br><br><span class="hljs-meta">@Injectable</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CategoryService</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> prisma: PrismaService</span>) &#123;<br><br>  &#125;<br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">create</span>(<span class="hljs-params">createCategoryDto: CreateCategoryDto</span>) &#123;<br>    <span class="hljs-keyword">const</span> category = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">prisma</span>.<span class="hljs-property">category</span>.<span class="hljs-title function_">create</span>(&#123;<br>      <span class="hljs-attr">data</span>: &#123;<br>        <span class="hljs-attr">title</span>: createCategoryDto.<span class="hljs-property">title</span><br>      &#125;<br>    &#125;)<br>    <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;添加栏目成功&quot;</span> &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">findAll</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> categories = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">prisma</span>.<span class="hljs-property">category</span>.<span class="hljs-title function_">findMany</span>()<br>    <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">data</span>: categories &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">findOne</span>(<span class="hljs-params">id: <span class="hljs-built_in">number</span></span>) &#123;<br>    <span class="hljs-keyword">const</span> category = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">prisma</span>.<span class="hljs-property">category</span>.<span class="hljs-title function_">findUnique</span>(&#123;<br>      <span class="hljs-attr">where</span>: &#123; id &#125;<br>    &#125;)<br>    <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">data</span>: category &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">id: <span class="hljs-built_in">number</span>, updateCategoryDto: UpdateCategoryDto</span>) &#123;<br>    <span class="hljs-keyword">const</span> category = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">prisma</span>.<span class="hljs-property">category</span>.<span class="hljs-title function_">update</span>(&#123;<br>      <span class="hljs-attr">data</span>: &#123;<br>        <span class="hljs-attr">title</span>: updateCategoryDto.<span class="hljs-property">title</span><br>      &#125;,<br>      <span class="hljs-attr">where</span>: &#123; id &#125;<br>    &#125;)<br>    <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;修改成功&quot;</span> &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">remove</span>(<span class="hljs-params">id: <span class="hljs-built_in">number</span></span>) &#123;<br>    <span class="hljs-keyword">const</span> category = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">prisma</span>.<span class="hljs-property">category</span>.<span class="hljs-title function_">delete</span>(&#123;<br>      <span class="hljs-attr">where</span>: &#123; id &#125;<br>    &#125;)<br>    <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;删除成功&quot;</span> &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><h3 id="增加栏目"><a href="#增加栏目" class="headerlink" title="增加栏目"></a>增加栏目</h3><p><img src="https://i.imgur.com/rv47BAd.png" alt="image-20221018174801964"></p></li><li><h3 id="删除栏目"><a href="#删除栏目" class="headerlink" title="删除栏目"></a>删除栏目</h3><p><img src="https://i.imgur.com/ayLllK2.png" alt="image-20221018174830043"></p></li><li><h3 id="修改栏目"><a href="#修改栏目" class="headerlink" title="修改栏目"></a>修改栏目</h3><p><img src="https://i.imgur.com/zArESKM.png" alt="image-20221018175147099"></p></li><li><h3 id="获取全部栏目"><a href="#获取全部栏目" class="headerlink" title="获取全部栏目"></a>获取全部栏目</h3><p><img src="https://i.imgur.com/vNZYZ0k.png" alt="image-20221018175106004"></p></li><li><h3 id="获取栏目详情"><a href="#获取栏目详情" class="headerlink" title="获取栏目详情"></a>获取栏目详情</h3><p><img src="https://i.imgur.com/gNlkpQK.png" alt="image-20221018175219584"></p></li></ol><h2 id="十八、Token-身份验证"><a href="#十八、Token-身份验证" class="headerlink" title="十八、Token 身份验证"></a>十八、Token 身份验证</h2><ol><li><h3 id="Jwt-策略"><a href="#Jwt-策略" class="headerlink" title="Jwt 策略"></a>Jwt 策略</h3><ol><li><h4 id="在-Auth-模块中添加-strategy-文件夹"><a href="#在-Auth-模块中添加-strategy-文件夹" class="headerlink" title="在 Auth 模块中添加 strategy 文件夹"></a>在 Auth 模块中添加 <code>strategy</code> 文件夹</h4></li><li><h4 id="写入-jwt-strategy-ts-文件"><a href="#写入-jwt-strategy-ts-文件" class="headerlink" title="写入 jwt.strategy.ts 文件"></a>写入 <code>jwt.strategy.ts</code> 文件</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">PrismaService</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../prisma/prisma.service&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ConfigService</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/config&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ExtractJwt</span>, <span class="hljs-title class_">Strategy</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;passport-jwt&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">PassportStrategy</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/passport&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Injectable</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><br><span class="hljs-meta">@Injectable</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtStrategy</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">PassportStrategy</span>(<span class="hljs-title class_">Strategy</span>, <span class="hljs-string">&#x27;jwt&#x27;</span>) &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">configService: ConfigService, <span class="hljs-keyword">private</span> prisma: PrismaService</span>) &#123;<br>        <span class="hljs-variable language_">super</span>(&#123;<br>            <span class="hljs-comment">//解析用户提交的header中的Bearer Token数据</span><br>            <span class="hljs-attr">jwtFromRequest</span>: <span class="hljs-title class_">ExtractJwt</span>.<span class="hljs-title function_">fromAuthHeaderAsBearerToken</span>(),<br>            <span class="hljs-comment">//加密码的 secret</span><br>            <span class="hljs-attr">secretOrKey</span>: configService.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;TOKEN_SECRET&#x27;</span>),<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-comment">//验证通过后获取用户资料</span><br>    <span class="hljs-keyword">async</span> <span class="hljs-title function_">validate</span>(<span class="hljs-params">&#123; sub: id &#125;</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">prisma</span>.<span class="hljs-property">user</span>.<span class="hljs-title function_">findUnique</span>(&#123;<br>            <span class="hljs-attr">where</span>: &#123; id &#125;,<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><h3 id="Auth-模块添加-Jwt-策略"><a href="#Auth-模块添加-Jwt-策略" class="headerlink" title="Auth 模块添加 Jwt 策略"></a>Auth 模块添加 Jwt 策略</h3><ol><li><h4 id="auth-module-ts"><a href="#auth-module-ts" class="headerlink" title="auth.module.ts"></a><code>auth.module.ts</code></h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// ...</span><br>  <span class="hljs-attr">providers</span>: [<span class="hljs-title class_">AuthService</span>, <span class="hljs-title class_">JwtStrategy</span>]<br><span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></figure></li></ol></li><li><h3 id="接口添加守卫"><a href="#接口添加守卫" class="headerlink" title="接口添加守卫"></a>接口添加守卫</h3><ol><li><h4 id="以获取全部栏目为例"><a href="#以获取全部栏目为例" class="headerlink" title="以获取全部栏目为例"></a>以获取全部栏目为例</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// ...</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AuthGuard</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/passport&#x27;</span>;<br><span class="hljs-comment">// ...  </span><br>  <span class="hljs-meta">@Get</span>()<br>  <span class="hljs-meta">@UseGuards</span>(<span class="hljs-title class_">AuthGuard</span>(<span class="hljs-string">&#x27;jwt&#x27;</span>))<br>  <span class="hljs-title function_">findAll</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">categoryService</span>.<span class="hljs-title function_">findAll</span>();<br>  &#125;<br><span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></figure></li></ol></li><li><h3 id="接口测试-11"><a href="#接口测试-11" class="headerlink" title="接口测试"></a>接口测试<img src="https://i.imgur.com/rzTjhUz.png" alt="image-20221024143754795"></h3><p>返回 401</p></li><li><h3 id="聚合装饰器"><a href="#聚合装饰器" class="headerlink" title="聚合装饰器"></a>聚合装饰器</h3><ol><li><h4 id="如果每个需要-Tkoen-验证的接口都要手动写的话就太麻烦了，所以可以弄一个聚合装饰器"><a href="#如果每个需要-Tkoen-验证的接口都要手动写的话就太麻烦了，所以可以弄一个聚合装饰器" class="headerlink" title="如果每个需要 Tkoen 验证的接口都要手动写的话就太麻烦了，所以可以弄一个聚合装饰器"></a>如果每个需要 Tkoen 验证的接口都要手动写的话就太麻烦了，所以可以弄一个聚合装饰器</h4></li><li><h4 id="Auth-新建-decorator-文件夹"><a href="#Auth-新建-decorator-文件夹" class="headerlink" title="Auth 新建 decorator 文件夹"></a>Auth 新建 <code>decorator</code> 文件夹</h4></li><li><h4 id="新建-auth-decorator-ts-文件"><a href="#新建-auth-decorator-ts-文件" class="headerlink" title="新建 auth.decorator.ts 文件"></a>新建 <code>auth.decorator.ts</code> 文件</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; applyDecorators, <span class="hljs-title class_">SetMetadata</span>, <span class="hljs-title class_">UseGuards</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@nestjs/common&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AuthGuard</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@nestjs/passport&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Auth</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">applyDecorators</span>(<span class="hljs-title class_">UseGuards</span>(<span class="hljs-title class_">AuthGuard</span>(<span class="hljs-string">&#x27;jwt&#x27;</span>)))<br>&#125;<br></code></pre></td></tr></table></figure></li><li><h4 id="在-Auth-Controller-引用"><a href="#在-Auth-Controller-引用" class="headerlink" title="在 Auth Controller 引用"></a>在 Auth Controller 引用</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// ...</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Auth</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;src/auth/decorator/auth.decorator&#x27;</span>;<br><span class="hljs-comment">// ...  </span><br><span class="hljs-comment">// 文章列表</span><br>  <span class="hljs-meta">@Get</span>()<br>  <span class="hljs-comment">// @UseGuards(AuthGuard(&#x27;jwt&#x27;))</span><br>  <span class="hljs-meta">@Auth</span>()<br>  <span class="hljs-title function_">findAll</span>(<span class="hljs-params"><span class="hljs-meta">@Query</span>(<span class="hljs-string">&#x27;page&#x27;</span>) page: <span class="hljs-built_in">string</span></span>) &#123;<br>    <span class="hljs-keyword">if</span> (!page) page = <span class="hljs-string">&#x27;1&#x27;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">articleService</span>.<span class="hljs-title function_">findAll</span>(+page);<br>  &#125;<br></code></pre></td></tr></table></figure></li><li><h4 id="接口测试-12"><a href="#接口测试-12" class="headerlink" title="接口测试"></a>接口测试<img src="https://i.imgur.com/KRfxX2m.png" alt="image-20221027112715168"></h4></li><li><h4 id="这样就不用每次都要写一行了"><a href="#这样就不用每次都要写一行了" class="headerlink" title="这样就不用每次都要写一行了"></a>这样就不用每次都要写一行了</h4></li></ol></li></ol><h2 id="十九、角色守卫"><a href="#十九、角色守卫" class="headerlink" title="十九、角色守卫"></a>十九、角色守卫</h2><ol><li><h4 id="数据库用户模型添加角色字段"><a href="#数据库用户模型添加角色字段" class="headerlink" title="数据库用户模型添加角色字段"></a>数据库用户模型添加角色字段</h4><p><code>schema.prisma</code></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs text">// ...<br>model user &#123;<br>  id       Int     @id @default(autoincrement()) @db.UnsignedInt<br>  name     String  @unique<br>  password String<br>  role     String?<br>&#125;<br>// ...<br></code></pre></td></tr></table></figure></li><li><h4 id="重新生成迁移文件"><a href="#重新生成迁移文件" class="headerlink" title="重新生成迁移文件"></a>重新生成迁移文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npx prisma migrate dev<br></code></pre></td></tr></table></figure></li><li><h4 id="自动生成文件添加角色字段"><a href="#自动生成文件添加角色字段" class="headerlink" title="自动生成文件添加角色字段"></a>自动生成文件添加角色字段</h4><p><code>seed.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// ...</span><br><span class="hljs-keyword">await</span> prisma.<span class="hljs-property">user</span>.<span class="hljs-title function_">create</span>(&#123;<br>        <span class="hljs-attr">data</span>: &#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;admin&#x27;</span>,<br>            <span class="hljs-attr">password</span>: <span class="hljs-keyword">await</span> <span class="hljs-title function_">hash</span>(<span class="hljs-string">&#x27;123456&#x27;</span>),<br>            <span class="hljs-attr">role</span>:<span class="hljs-string">&#x27;admin&#x27;</span><br>        &#125;<br>    &#125;)<br><span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></figure></li><li><h4 id="定义枚举角色"><a href="#定义枚举角色" class="headerlink" title="定义枚举角色"></a>定义枚举角色</h4><ol><li><p>新建 <code>auth/enum.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Role</span> &#123;<br>    <span class="hljs-variable constant_">ADMIN</span> = <span class="hljs-string">&#x27;admin&#x27;</span>,<br>    <span class="hljs-variable constant_">EDITOR</span> = <span class="hljs-string">&#x27;editor&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><h4 id="在聚合装饰器里引用"><a href="#在聚合装饰器里引用" class="headerlink" title="在聚合装饰器里引用"></a>在聚合装饰器里引用</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; applyDecorators, <span class="hljs-title class_">SetMetadata</span>, <span class="hljs-title class_">UseGuards</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@nestjs/common&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AuthGuard</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@nestjs/passport&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Role</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../enum&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">RoleGuard</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../guard/role.guard&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Auth</span>(<span class="hljs-params">...roles: Role[]</span>) &#123;<br>    <span class="hljs-comment">/* SetMetadata 设置元数据 */</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">applyDecorators</span>(<span class="hljs-title class_">SetMetadata</span>(<span class="hljs-string">&#x27;roles&#x27;</span>, roles), <span class="hljs-title class_">UseGuards</span>(<span class="hljs-title class_">AuthGuard</span>(<span class="hljs-string">&#x27;jwt&#x27;</span>), <span class="hljs-title class_">RoleGuard</span>))<br>&#125;<br></code></pre></td></tr></table></figure></li><li><h4 id="创建角色守卫"><a href="#创建角色守卫" class="headerlink" title="创建角色守卫"></a>创建角色守卫</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nest g gu auth/guard/role --no-spec<br></code></pre></td></tr></table></figure></li><li><h3 id="role-guard-ts"><a href="#role-guard-ts" class="headerlink" title="role.guard.ts"></a><code>role.guard.ts</code></h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">CanActivate</span>, <span class="hljs-title class_">ExecutionContext</span>, <span class="hljs-title class_">Injectable</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Reflector</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/core&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; user &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@prisma/client&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Observable</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;rxjs&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Role</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../enum&#x27;</span>;<br><br><span class="hljs-meta">@Injectable</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RoleGuard</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CanActivate</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> reflector: Reflector</span>) &#123; &#125;<br>  <span class="hljs-title function_">canActivate</span>(<span class="hljs-attr">context</span>: <span class="hljs-title class_">ExecutionContext</span>,): <span class="hljs-built_in">boolean</span> | <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-built_in">boolean</span>&gt; | <span class="hljs-title class_">Observable</span>&lt;<span class="hljs-built_in">boolean</span>&gt; &#123;<br>    <span class="hljs-comment">/* 打印当前用户 */</span><br>    <span class="hljs-keyword">const</span> user = context.<span class="hljs-title function_">switchToHttp</span>().<span class="hljs-title function_">getRequest</span>().<span class="hljs-property">user</span> <span class="hljs-keyword">as</span> user<br>    <span class="hljs-comment">/* 打印元数据的角色 */</span><br>    <span class="hljs-keyword">const</span> roles = <span class="hljs-variable language_">this</span>.<span class="hljs-property">reflector</span>.<span class="hljs-property">getAllAndMerge</span>&lt;<span class="hljs-title class_">Role</span>[]&gt;(<span class="hljs-string">&#x27;roles&#x27;</span>, [context.<span class="hljs-title function_">getHandler</span>(), context.<span class="hljs-title function_">getClass</span>()])<br>    <span class="hljs-keyword">return</span> roles.<span class="hljs-property">length</span> ? roles.<span class="hljs-title function_">some</span>(<span class="hljs-function">(<span class="hljs-params">role</span>) =&gt;</span> &#123; user.<span class="hljs-property">role</span> === role &#125;) : <span class="hljs-literal">true</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><h3 id="在控制器调用"><a href="#在控制器调用" class="headerlink" title="在控制器调用"></a>在控制器调用</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 文章列表</span><br><span class="hljs-meta">@Get</span>()<br><span class="hljs-meta">@Auth</span>(<span class="hljs-title class_">Role</span>.<span class="hljs-property">ADMIN</span>)<br><span class="hljs-title function_">findAll</span>(<span class="hljs-params"><span class="hljs-meta">@Query</span>(<span class="hljs-string">&#x27;page&#x27;</span>) page: <span class="hljs-built_in">string</span></span>) &#123;<br>  <span class="hljs-keyword">if</span> (!page) page = <span class="hljs-string">&#x27;1&#x27;</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">articleService</span>.<span class="hljs-title function_">findAll</span>(+page);<br>&#125;<br></code></pre></td></tr></table></figure><p>只有具有管理员权限的用户才能调用该接口</p></li></ol><h2 id="二十、文件上传接口"><a href="#二十、文件上传接口" class="headerlink" title="二十、文件上传接口"></a>二十、文件上传接口</h2><ol><li><h3 id="创建-upload-模块和服务"><a href="#创建-upload-模块和服务" class="headerlink" title="创建 upload 模块和服务"></a>创建 upload 模块和服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">nest g mo upload<br>nest g co upload --no-spec<br>nest g s upload --no-spec<br></code></pre></td></tr></table></figure></li><li><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Global</span>, <span class="hljs-title class_">Module</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">UploadService</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./upload.service&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">UploadController</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./upload.controller&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">MulterModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/platform-express&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; diskStorage &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;multer&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; extname &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;path&#x27;</span>;<br><br><span class="hljs-meta">@Global</span>()<br><span class="hljs-meta">@Module</span>(&#123;<br>  <span class="hljs-attr">imports</span>: [<br>    <span class="hljs-title class_">MulterModule</span>.<span class="hljs-title function_">registerAsync</span>(&#123;<br>      <span class="hljs-title function_">useFactory</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>          <span class="hljs-attr">storage</span>: <span class="hljs-title function_">diskStorage</span>(&#123;<br>            <span class="hljs-comment">//文件储存位置</span><br>            <span class="hljs-attr">destination</span>: <span class="hljs-string">&#x27;uploads&#x27;</span>,<br>            <span class="hljs-comment">//文件名定制</span><br>            <span class="hljs-attr">filename</span>: <span class="hljs-function">(<span class="hljs-params">req, file, callback</span>) =&gt;</span> &#123;<br>              <span class="hljs-keyword">const</span> path = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>() + <span class="hljs-string">&#x27;-&#x27;</span> + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">1e10</span>) + <span class="hljs-title function_">extname</span>(file.<span class="hljs-property">originalname</span>)<br>              <span class="hljs-title function_">callback</span>(<span class="hljs-literal">null</span>, path)<br>            &#125;,<br>          &#125;),<br>        &#125;<br>      &#125;,<br>    &#125;),<br>  ],<br>  <span class="hljs-attr">providers</span>: [<span class="hljs-title class_">UploadService</span>],<br>  <span class="hljs-attr">controllers</span>: [<span class="hljs-title class_">UploadController</span>]<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UploadModule</span> &#123; &#125;<br><br></code></pre></td></tr></table></figure></li><li><h3 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">BadRequestException</span>, <span class="hljs-title class_">Controller</span>, <span class="hljs-title class_">Post</span>, <span class="hljs-title class_">UploadedFile</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@nestjs/common&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Auth</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;src/auth/decorator/auth.decorator&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">DocUpload</span>, <span class="hljs-title class_">ImageUpload</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./decorator/upload.decorator&#x27;</span>;<br><br><span class="hljs-meta">@Controller</span>(<span class="hljs-string">&#x27;upload&#x27;</span>)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UploadController</span> &#123;<br>    <span class="hljs-meta">@Post</span>(<span class="hljs-string">&#x27;image&#x27;</span>)<br>    <span class="hljs-meta">@Auth</span>()<br>    <span class="hljs-meta">@ImageUpload</span>()<br>    <span class="hljs-title function_">images</span>(<span class="hljs-params"><span class="hljs-meta">@UploadedFile</span>() file: Express.Multer.File</span>) &#123;<br>        <span class="hljs-keyword">if</span> (!file) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadRequestException</span>(<span class="hljs-string">&quot;file不能为空&quot;</span>)<br>        &#125;<br>        <span class="hljs-keyword">return</span> file<br>    &#125;<br><br>    <span class="hljs-meta">@Post</span>(<span class="hljs-string">&#x27;doc&#x27;</span>)<br>    <span class="hljs-meta">@Auth</span>()<br>    <span class="hljs-meta">@DocUpload</span>()<br>    <span class="hljs-title function_">doc</span>(<span class="hljs-params"><span class="hljs-meta">@UploadedFile</span>() file: Express.Multer.File</span>) &#123;<br>        <span class="hljs-keyword">if</span> (!file) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadRequestException</span>(<span class="hljs-string">&quot;file不能为空&quot;</span>)<br>        &#125;<br>        <span class="hljs-keyword">return</span> file<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><h3 id="文件上传聚合装饰器"><a href="#文件上传聚合装饰器" class="headerlink" title="文件上传聚合装饰器"></a>文件上传聚合装饰器</h3><p><code>upload.decorator.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; applyDecorators, <span class="hljs-title class_">UnsupportedMediaTypeException</span>, <span class="hljs-title class_">UseInterceptors</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@nestjs/common&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">FileInterceptor</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@nestjs/platform-express&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">MulterOptions</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@nestjs/platform-express/multer/interfaces/multer-options.interface&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Upload</span>(<span class="hljs-params">fieldName = <span class="hljs-string">&quot;file&quot;</span>, option: MulterOptions = &#123;&#125;</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">applyDecorators</span>(<span class="hljs-title class_">UseInterceptors</span>(<span class="hljs-title class_">FileInterceptor</span>(fieldName, option)))<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fileFilter</span>(<span class="hljs-params"><span class="hljs-keyword">type</span>: <span class="hljs-built_in">string</span></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">req: <span class="hljs-built_in">any</span>, file: Express.Multer.File, callback: (error: <span class="hljs-built_in">Error</span> | <span class="hljs-literal">null</span>, acceptFile: <span class="hljs-built_in">boolean</span>) =&gt; <span class="hljs-built_in">void</span></span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (!file.<span class="hljs-property">mimetype</span>.<span class="hljs-title function_">includes</span>(<span class="hljs-keyword">type</span>)) &#123;<br>            <span class="hljs-title function_">callback</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedMediaTypeException</span>(<span class="hljs-string">&#x27;文件类型错误&#x27;</span>), <span class="hljs-literal">false</span>)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-title function_">callback</span>(<span class="hljs-literal">null</span>, <span class="hljs-literal">true</span>)<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">ImageUpload</span>(<span class="hljs-params">fieldName = <span class="hljs-string">&#x27;file&#x27;</span></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Upload</span>(fieldName, &#123;<br>        <span class="hljs-attr">fileFilter</span>: <span class="hljs-title function_">fileFilter</span>(<span class="hljs-string">&#x27;image&#x27;</span>)<br>    &#125;)<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">DocUpload</span>(<span class="hljs-params">fieldName = <span class="hljs-string">&#x27;file&#x27;</span></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Upload</span>(fieldName, &#123;<br>        <span class="hljs-attr">fileFilter</span>: <span class="hljs-title function_">fileFilter</span>(<span class="hljs-string">&#x27;document&#x27;</span>)<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><h3 id="设置静态目录"><a href="#设置静态目录" class="headerlink" title="设置静态目录"></a>设置静态目录</h3><p><code>main.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// ...</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">bootstrap</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">await</span> <span class="hljs-title class_">NestFactory</span>.<span class="hljs-property">create</span>&lt;<span class="hljs-title class_">NestExpressApplication</span>&gt;(<span class="hljs-title class_">AppModule</span>);<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-comment">// 静态目录</span><br>  app.<span class="hljs-title function_">useStaticAssets</span>(<span class="hljs-string">&#x27;uploads&#x27;</span>, &#123; <span class="hljs-attr">prefix</span>: <span class="hljs-string">&#x27;/uploads&#x27;</span> &#125;)<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><h3 id="接口测试-13"><a href="#接口测试-13" class="headerlink" title="接口测试"></a>接口测试</h3><p><img src="https://i.imgur.com/E7RF5vQ.png" alt="image-20221027143531957"></p></li></ol><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这个项目的视频课是在9月中买的，其中断断续续跟着视频做，后来意识到我只是跟着视频做的话，很快就没什么印象了（虽然写了这篇文章记录后还是一样会忘掉），而且这里里面的很多代码其实写了之后就不会动的了，所以我把他记录下来，方便下次来抄。不管这个项目的质量怎样，起码这是我做的第一个后端项目，也算是跨出了第一步。</p><p>写这个项目的时候我还是要一边跟着视频一边抄，因为我对 TypeScript 和 MySQL 不熟悉，并且在我还没买这套视频前，自己也试了一下按照网上别人的博客来做了一下简单的 Nest.JS 功能。功能实现倒是实现了，但是也踩了不少坑。在某一天早上坐地铁上班时，我意外的发现了这个视频教程，价格不贵，日期也新鲜，就买了。</p><p>跟着视频做确实轻松了不少，坑也少踩了好多。但是这并不意味着你只要对着视频复制粘贴就能学会的，改动脑子的时候就要动脑子。我在培训的时候就已经留意到了很多人的心态是不正常的。妄想着自己给了钱，交了学费后出来就能月入过万。不能自己主动的学习，神仙教你也不行。写到这里有点语无伦次了，总之就是要能自我驱动，提升自己的能力吧。</p>]]></content>
    
    
    
    <tags>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Typora 调用 PicGo 上传图片到图床</title>
    <link href="/2022/10/08/typora-use-picgo-upload-image/"/>
    <url>/2022/10/08/typora-use-picgo-upload-image/</url>
    
    <content type="html"><![CDATA[<blockquote><p>今天心血来潮想用一下 Typora 自带的功能，毕竟是 <del>(尊贵的)</del> 正版用户，不用白不用了～</p><p>妈的，写完才发现 Gitee 防盗链了。现在用自建兰空图床去了～</p></blockquote><span id="more"></span><h2 id="一、安装-PicGo"><a href="#一、安装-PicGo" class="headerlink" title="一、安装 PicGo"></a>一、安装 PicGo</h2><p>因为我用的是 Mac ，所以我直接就用 HomeBrew 安装了 <code>brew install picgo</code> ，Windows 用户执行去官网下载就好。</p><h2 id="二、Gitee-配置"><a href="#二、Gitee-配置" class="headerlink" title="二、Gitee 配置"></a><del>二、Gitee 配置</del></h2><ol><li><del>新建仓库用于存储图片，建议把下面初始化，因为现在是私有仓库<img src="https://i.imgur.com/TjfkwW7.png" alt="image-20221008161714901"></del></li><li><del>将仓库转为公共仓库，点击右上角的管理，拉到最底，保存<img src="https://i.imgur.com/MNrCBGP.png" alt="image-20221008162036383"></del></li><li><del>点击头像，进入设置</del></li><li><del>在侧边栏的安全设置，点击私人令牌<img src="https://i.imgur.com/TR5lnDt.png" alt="image-20221008162214797"></del></li><li><del>点击生成新令牌<img src="https://i.imgur.com/R3b7zTL.png" alt="image-20221008162253140"></del></li><li><del>全选，提交</del></li><li><del>复制私人令牌，只会出现一次，注意保存，后续会用上<img src="https://i.imgur.com/QHVajxf.png" alt="image-20221008162445826"></del></li></ol><h2 id="三、PicGo-配置"><a href="#三、PicGo-配置" class="headerlink" title="三、PicGo 配置"></a><del>三、PicGo 配置</del></h2><ol><li><del>来到 PicGo 主界面，在左侧导航栏的插件设置，安装如图插件<img src="https://i.imgur.com/lf0IWhl.png" alt="image-20221008162758296"></del></li><li><del>安装完后，在图床设置打开 gitee</del></li><li><del>如图设置<img src="https://i.imgur.com/Fn0PvG6.png" alt="image-20221008162949494"></del></li><li><del>repo 为你的仓库名称，可以直接复制 URL 的来</del></li><li><del>branch 直接填 master 就行</del></li><li><del>token 就是刚才新建的私人令牌</del></li><li><del>path 是上传的路径，按个人喜好来</del></li><li><del>点击确定并设置为默认图床</del></li></ol><h2 id="四、Typora-配置"><a href="#四、Typora-配置" class="headerlink" title="四、Typora 配置"></a>四、Typora 配置</h2><ol><li>打开偏好设置</li><li>点击图像</li><li>插入图片时选择上传，上传服务选择 PicGo <img src="https://i.imgur.com/gE25tjx.png" alt="image-20221008163242556"></li><li>Windows 用户还要设置 PicGo 的路径</li><li>然后点击旁边的验证图片上传选项</li><li>没报错就配置完成了</li><li>可以自己试一下截图粘贴看看效果</li><li><del>这篇文章的图片就是这样来的～</del></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>移动 ZN-M180G 光猫 获取 PPPOE 信息</title>
    <link href="/2022/08/16/ZN-M180G-PPPoE/"/>
    <url>/2022/08/16/ZN-M180G-PPPoE/</url>
    
    <content type="html"><![CDATA[<blockquote><p>太长不看：默认PPPoE密码是手机号的后6位</p></blockquote><span id="more"></span><h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p>坐标广东，光猫型号是兆能ZN-M180G，其他型号可能有所不同。移动师傅上门安装时不在家，当时已经提前说要改桥接的，回到家才发现没改，那我就自己改吧。根据网上教程获取PPPoE只要把 <code>input</code> 的 <code>text</code> 从password改成text就可以显示明文密码了，不过这型号改了依旧是写死的*，只知道账号不行啊，就有了以下折腾过程（问就是生命在于折腾）～</p><h2 id="二、开启Telnet"><a href="#二、开启Telnet" class="headerlink" title="二、开启Telnet"></a>二、开启Telnet</h2><ol><li><p>使用默认普通账户登录。</p></li><li><p><a href="http://192.168.1.1/getpage.gch?pid=1002&nextpage=tele_sec_tserver_t.gch">开启Telnet</a>，保存</p></li><li><p>Telnet账号为 <code>CMCCAdmin</code>  默认密码为 <code>aDm8H%MdA</code></p></li></ol><h2 id="三、拷贝配置文件"><a href="#三、拷贝配置文件" class="headerlink" title="三、拷贝配置文件"></a>三、拷贝配置文件</h2><ol><li><p>使用Telnet账号密码登录光猫Telnet</p></li><li><p>输入 <code>su</code> 切换到超级用户，密码依旧为 <code>aDm8H%MdA</code></p></li><li><p>输入命令复制 <code>db_user_cfg.xml</code> 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cp /userconfig/cfg/db_user_cfg.xml /mnt/<br>cd /mnt/<br>chmod 777 db_user_cfg.xml<br></code></pre></td></tr></table></figure></li><li><p>开启光猫自带FTP功能，匿名访问</p></li><li><p>下载 <code>db_user_cfg.xml</code> 文件到本地</p></li></ol><h2 id="四、解密配置文件"><a href="#四、解密配置文件" class="headerlink" title="四、解密配置文件"></a>四、解密配置文件</h2><ol><li><p>因为 <code>db_user_cfg.xml</code> 文件是加密的，不能通过编辑器正常打开</p></li><li><p>参考链接3里面写的是中兴方案，不过我看文件名都是一样的，所以打算试一试</p></li><li><p>将代码保存为 <code>py</code> 执行文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">pip install pycrypto</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> binascii <span class="hljs-keyword">import</span> a2b_hex<br>KEY = <span class="hljs-string">b&#x27;\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">text</span>):<br>    cryptor = AES.new(KEY, AES.MODE_ECB)<br>    plain_text = cryptor.decrypt(a2b_hex(text))<br>    <span class="hljs-keyword">return</span> plain_text<br>cfg_file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;db_user_cfg.xml&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>)<br>dec_file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;db_user_cfg.decode.xml&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>)<br>file_header = cfg_file.read(<span class="hljs-number">60</span>)<br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    trunk_info = cfg_file.read(<span class="hljs-number">12</span>)<br>    trunk_data = cfg_file.read(<span class="hljs-number">65536</span>)<br>    trunk_real_size = <span class="hljs-built_in">int</span>.from_bytes(trunk_info[<span class="hljs-number">0</span>:<span class="hljs-number">4</span>], byteorder=<span class="hljs-string">&#x27;big&#x27;</span>, signed=<span class="hljs-literal">False</span>)<br>    trunk_size = <span class="hljs-built_in">int</span>.from_bytes(trunk_info[<span class="hljs-number">4</span>:<span class="hljs-number">8</span>], byteorder=<span class="hljs-string">&#x27;big&#x27;</span>, signed=<span class="hljs-literal">False</span>)<br>    next_trunk = <span class="hljs-built_in">int</span>.from_bytes(trunk_info[<span class="hljs-number">8</span>:<span class="hljs-number">12</span>], byteorder=<span class="hljs-string">&#x27;big&#x27;</span>, signed=<span class="hljs-literal">False</span>)<br>    <span class="hljs-built_in">print</span>(trunk_real_size, trunk_size, next_trunk)<br>    dec_file.write(decrypt(trunk_data.<span class="hljs-built_in">hex</span>()).decode(encoding=<span class="hljs-string">&quot;utf-8&quot;</span>))<br>    <span class="hljs-keyword">if</span> next_trunk==<span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure></li><li><p>接下来的步骤我默认是已安装好Python3环境，具体安装请自行搜索</p></li><li><p>输入 <code>pip install pycrypto</code> 安装依赖包</p></li><li><p>把创建的 <code>py</code> 文件和 <code>db_user_cfg.xml</code> 文件放在同一个目录中</p></li><li><p>输入 <code>python3 文件名称.py</code> 执行解密</p></li><li><p>解密完成后会生成 <code>db_user_cfg.decode.xml</code> 文件，该文件就是解密后的文件</p></li><li><p>搜索自己的PPPoE账号，下一行就是你的PPPoE密码了，然后开始进行改桥接吧，到此结束</p></li></ol><h2 id="五、参考链接"><a href="#五、参考链接" class="headerlink" title="五、参考链接"></a>五、参考链接</h2><ol><li><p><a href="https://www.right.com.cn/FORUM/thread-7362164-1-1.html">恩山论坛</a></p></li><li><p><a href="https://blog.csdn.net/gsls200808/article/details/118517821">CSDN</a></p></li><li><p><a href="https://www.52pojie.cn//thread-1577267-1-1.html">52破解</a></p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
